3,Developer Pride,"Leave code better than you found it. I heard Uncle Bob say that. I can’t recall if it was a video, blog post, or interview; but it hit me right between the eyes. When I heard “leave code better than you found it”, I was actively developing around code. I saw code that could be better, but left it. I saw code that I didn’t understand. Instead of understanding it and using my code to extend it, I coded around that also.

What really sucks is that I never used to be that way. I became that way. Tight deadlines, working with code I didn’t write, and inexperience made me that way. Inexperience? No, not inexperience as a developer; inexperience working with others. Working with other developers is intimidating. I wonder if I am good enough, fast enough, or even smart enough. It’s easy to try to work faster than I am capable of. The end result is never pleasant. As developers, we don’t get faster by working faster. We get faster by becoming more efficient. No amount of corner cutting will change that. It took one sentence for me to be reminded of that.

It doesn’t take much to leave code better. Reduce database calls or HTTP requests, add some caching, optimize a block or loop, or DRY something up. You don’t have to refactor the entire application. Just refactor one method. Speaking of methods, this applies to more than server side code. Front end code needs this too. Simplify an HTML element, remove divitis, or reduce CSS duplication. Again, it doesn’t take much. Just think if you did this every time you opened a file. Software would continually get better and would be generally more pleasant to use.
",2011-08-20 01:06:08.778022,2012-08-21 00:33:54.58684,,,f
5,Too Big To Fail,"There is a reason I do not develop iOS applications. Every time Apple decides they need their cut from a developers hard work, I am reminded why. Ironically, every time Apple decides to update their terms to make sure they have the upper hand, is about the time I start thinking I should start developing native mobile apps. I wake up quickly. I agree that Apple is entitled to their cut, but they are destroying what used to be a great platform for developers. A great developer friendly platform is what catapulted the iOS line of devices to begin with. There is no way the iPhone is where it is today without developers creating awesome apps for it. I’m not saying it wouldn’t have been successful; just not this successful.

I see Apple as having a “too big to fail” attitude. That is a razor’s edge. Just ask Microsoft and they will tell you that no company is too big to fail. Back when I switched to Apple products, it was because they offered what I wanted. I wanted to do Rails development, and I liked what I saw in terms of tools. TextMate, for example. Sure, I could do Rails development on a Windows machine, but it sucks. Trust me. I set up a Rails environment on a Windows box. Torture! So I jumped ship.

I fear a similar situation with what Apple is doing now. It won’t be anytime soon, but if they keep screwing around with their iOS developers, they will leave. They will take the path of least resistance, just like I did when I came to Apple. And when Android has that one exclusive app, think Angry Birds when it was iOS only, the ball will start rolling. It all starts with one awesome app that you can’t get anywhere else.

(2-18-11) Update: Google may have smelled blood. They just released <a href=""http://www.google.com/landing/onepass/"">One Pass</a>, a possible competitor to Apple’s subscription plan.",2011-08-20 01:29:46.540151,2012-08-21 00:33:54.594773,,,f
11,"Whoa, Search Any Site With Chrome","This may be something new, but I stumbled onto something today. Apparently you can search some websites in Chrome directly from the address bar.

<img src=""/images/search_chrome.png"" alt="""" />

When you add a space after the <span class=""caps"">URL</span>, you can then search the site for what you need. Completely awesome for finding Gems on GitHub.

<img src=""/images/search_github.png"" alt="""" />",2011-08-20 01:40:58.569748,2012-08-21 00:33:54.613023,,,f
6,A Win For Technology,"I sat with my family and watched Watson, <em>the computer <span class=""caps"">IBM</span> created</em>, compete on Jeopardy and we were in awe of the awesome. This really was historic, not to mention a genius move by <span class=""caps"">IBM</span>. Why was it genius by <span class=""caps"">IBM</span>?
<ol>
	<li>The country saw <span class=""caps"">IBM</span> exercise their motto &#8220;Build a smarter planet&#8221;. Even though through the first round Watson stumbled a bit, it was impressive how this machine could parse and answer human language.</li>
	<li>Non-technical people had the opportunity to see the people that were behind the machine. This is something that normal people often do not see. Most people just expect computers to work, never giving a thought to who built it, or how much time went into it.</li>
</ol>

Those two points can stand on their own, but I think the most impressive thing about Watson is what it leads to after Jeopardy. Possibilities in various fields were mentioned, including the medical field. That is the most impressive part. What technology will be spawned from a game?",2011-08-20 01:37:11.977778,2012-08-21 00:33:54.596478,,,f
7,Mental Rest,"I&#8217;ve been thinking about mental rest a lot. I know I could benefit from letting my brain relax. My brain is running full speed all day. There&#8217;s always a monitor running where I&#8217;m debugging something, reading something, researching something, so on and so on. When the work day is over, I grab my iPad and do the same thing. It&#8217;s hard not to be engaged in something with my schedule. Day job, part-time night job, and finishing up a degree at a University make it difficult to do &#8220;nothing&#8221;.

For the next week, I am going to set a side a block of time each day to relax. No studying, no programming/debugging, no research; just relax. Probably just listen to some music. I expect to feel completely refreshed. I also think that all the information that I have been cramming into my brain will finally have a chance to sink in. If all goes well, I will post my thoughts.",2011-08-20 01:38:03.676662,2012-08-21 00:33:54.60316,,,f
8,Moving The Mobile Web Forward,"I have this love/hate relationship with native mobile apps. They definitely have their place, but are often overused; I&#8217;m a huge  proponent of the mobile web. I think as developers, we should build apps not for a platform, but for a purpose. More often than not, this involves more than one platform. Games are exempt in my opinion. Native code is a perfect fit for games.

37signals just released a <a href=""http://basecamphq.com/mobile"">mobile version of Basecamp</a>. It&#8217;s a great app, and done purely in web technologies. This is a giant leap forward for a few reasons. One: some devs that are on the fence about mobile might look at this app and realize that it&#8217;s okay to go web versus native. Two: the crew at 37signals are creating quite a stir about their Cinco framework, which appears to be a rapid application framework for web apps, and will be open sourced.

I&#8217;m anxiously waiting for the release of Cinco. I have been looking for a mobile web solution and was entertaining the idea of creating my own micro framework. Maybe something based on Sinatra, but I would rather contribute to something that has the talent that 37signals brings behind it.",2011-08-20 01:38:50.996931,2012-08-21 00:33:54.605405,,,f
17,Apple Loses Top I Os Dev,"<a href=""http://mashable.com/2010/12/09/graeme-devine-leaves-apple/"">http://mashable.com/2010/12/09/graeme-devine-leaves-apple/</a>

Testament to the fact that money isn&#8217;t everything. Do what you love.",2011-08-20 01:44:45.114574,2012-08-21 00:33:54.634872,,,f
10,Project Portfolio,"Listening to the <a href=""http://www.pragprog.com/podcasts"">Pragmatic Podcast</a> recently, I picked up on the term <em>Project Portfolio</em> and it got me thinking. What if, instead of trying to show what I have worked on for client work; which is usually behind an <span class=""caps"">NDA</span> or some other form of agreement that prevents me from showing or claiming anything, I would just publish everything that I build locally. All the little todo apps, note taking apps, etc. All of them published on the web.

I never really liked the idea of a portfolio. What a time consuming pain. I mean I see the need for a professional portfolio; accolades, awards, letters of recommendation, etc. But a web portfolio is a time sucker and a blind display of work. I have no idea if the urls are active anymore. I guess I could host a local copy of the site in some circumstances, but then it may not match the actual site. What if the client changes script/images/etc.. Then I really don’t have any control. What a pain. I have never been a fan of them.

My personal projects on the other hand, are a labor of love. These are the apps I use almost daily. I continually improve and tweak them. If I really think about it, this is where my best work is at. This is where I experiment, try new technologies, optimize for speed,  so on and so on. I’m really thinking about starting a projects section and throwing up all my projects on there. Publishing more was a goal this year, sounds like a good way to get started.",2011-08-20 01:40:33.442583,2012-08-21 00:33:54.636541,,,f
19,Code Fearlessly,"<a href=""http://cam.ly/blog/2010/12/code-fearlessly/"">http://cam.ly/blog/2010/12/code-fearlessly/</a>

I think I may have to write this somewhere where will always see it. Too often, I am writing code around several lines of code that have been commented out. Scared that if I remove the code, it will break something.

We should all &#8220;Code Feaslessly&#8221;",2011-08-20 01:45:34.000156,2012-08-21 00:33:54.63997,,,f
14,Developer Goals For 2011,"As the end of the year approaches, like most people, I start to reflect on the year that is set to expire. This year was an interesting one. I have the first full year of teaching under my belt, I starting working for a company as a developer, and I have evolved as a developer more than in any other year.

<h2>Where Am I now?</h2>

As I write this, I happen to be on a bit of a break. Usually, I am working either 7-4 or 8-5 and I teach from 5:40 until 9:30 &#8211; 10ish twice a week. Besides that, I am finishing my degree at <a href=""http://www.bgsu.edu/""><span class=""caps"">BGSU</span></a>. Needless to say, I have a very full plate, but it’s all fun. Okay, the finishing the degree part kind of sucks, but that is more likely due to the content of the courses than the actual work.

I have really grown in all aspects of work. Well, it’s not really work most of the time; I really do enjoy it. Teaching is a great way for me to give back to the community. I love helping prepare web designers with tools and skills that they will actually use. I think I have improved in my teaching style, but ultimately the students would have to answer that. I know I have benefitted from my education at BG to improve the environment that I create for learning.

<h3>Developer Status</h3>

As for being a developer, I have learned a lot from working with other developers. I still find it amazing how much I can learn from just being around other developers. It’s something every developer should do. Not only through work, but through play also. Hanging out with like-minded developers is incredibly inspiring.

I still struggle with developer speed. I hate doing things that are “good enough”. Because of that, I spend a lot of time tweaking and refactoring when I probably should learn to just close the file and move on. This is probably the one area I need to work on. More on that later.

<h3>Frameworks</h3>

Frameworks were a big part of my 2010. Up until this year, I started every project from scratch; that included <span class=""caps"">PHP</span>, JavaScript, and <span class=""caps"">CSS</span>. <span class=""caps"">PHP</span> frameworks came first; mainly <a href=""http://codeigniter.com/"">CodeIgniter</a>, then came the JavaScript frameworks, finally settling on <a href=""http://jquery.com/"">jQuery</a>. Recently, I have been using <a href=""http://www.blueprintcss.org/"">BlueprintCSS</a> for common <span class=""caps"">CSS</span> layouts. I started to feel that it was insane to replicate the same layouts over and over. Blueprint fits my workflow well and hopefully makes me a little faster.

This year also brought on <a href=""http://rubyonrails.org/"">Rails</a>, and it blew me away. I slowly started moving away from <span class=""caps"">PHP</span>. My day job still requires <span class=""caps"">PHP</span>, but for anything I start outside of work; Rails it is. Rails has really helped me grow as a developer. I started looking at my code with a test first mentality. The conventions in Rails almost force me to do things in a certain way. I have become accustomed to the &#8220;Rails Way&#8221;.</p>

<h2>Where Would I Like to be?</h2>

There are a few goals that I have for the coming year. Naturally, I want improve in all aspects of developing and teaching. As I mentioned earlier, speed is my largest defect.  What I have yet to figure out is whether I am taking too long because I am adding quality code, or if the time if takes me is necessary to produce quality code. This will be a large turning point for me this year. I plan on concentrating on speed a lot, I still believe that web development is a creative craft that requires knowledge, experience, creativity, and pride. I try to treat every line of code as if it were my personal project. I definitely would not cut corners on something I am building for myself. I do not want to sacrifice that quality for speed, but fear that I have to make a compromise.

I also have a lot of half finished side projects laying around. I am going to make this the year I just release projects. They could be anything. I am no longer concerned with if what I am building has been done or not. Often, what I am building does exist, but does not fit what I want it to do enough.

Developers are encouraged to learn one new language a year. I do agree with this, it&#8217;s a great way to stay on top of your craft. I am approaching 2011 a little differently. I am really concentrating on <a href=""http://www.ruby-lang.org/en/"">Ruby</a>. I mean really mastering it. All of the ins and outs of the language.

Sadly, my JavaScript skills have slid in the last few years. I&#8217;m not saying I don&#8217;t know JavaScript well, but the JavaScript development of the past few years has <em>really</em> moved the language forward and I feel that I am not as good as I could or should be.

<h3>How Do I Get There?</h3>

In order to be where I would like to be by the end of 2011, there are a few things that I must do. The first thing is to make time for side projects and personal and professional development. It’s a lot easier said than done while working a full-time, part-time job, and still taking some online classes. I have a few ideas; start work a half an hour early, have a working lunch, work on the projects after work, or just simply limiting all of these social networks I am involved with. If I am going to release projects, code, and such; I need to work on those projects and shut Twitter down.

Releasing projects that are not perfect is a pain point for anyone in a creative profession. This is item number two. I’m still scared this is going to burn me, but I am going to do it anyway. Burns heal, right?

I think the best way to advance with a language is to do something meaningful. Hello World and a blog (<em>the new hello world</em>) only go so far. To really use a technology or language, you need to have useful case for it. Maybe it gets released, maybe it doesn’t. One thing for sure, you learn a lot about how to really use the language. I love the Code Kata ideas, so I plan on rolling my own; creating some katas that are more relevant to me as far as something I might actually use. With any luck, I might stumble onto something. Worst case scenario, I accomplish my goal of really digging into Ruby and JavaScript.

Here is to a great 2011!",2011-08-20 01:43:15.199389,2012-08-21 00:33:54.641561,,,f
18,Headjs,"<a href=""http://headjs.com/"">http://headjs.com/</a>
<blockquote>
Head JS frees the page from script loading burden. The scripts loading is separated from the page rendering and they are <em>always</em> loaded in paraller no matter how many of them and what the browser is. The difference on the user experience can be dramatic especially on the initial page load when the scripts are not yet in cache. It&#8217;s your crucial first impression.
</blockquote>

I haven&#8217;t played with it yet, but it looks promising.",2011-08-20 01:45:10.867844,2012-08-21 00:33:54.638408,,,f
15,11 Tips For Better Code,"<a href=""http://progfu.com/post/384161195/11-tips-for-better-code"">http://progfu.com/post/384161195/11-tips-for-better-code</a>

Great tips on code craftsmanship.",2011-08-20 01:43:40.335785,2012-08-21 00:33:54.643612,,,f
16,Strict Mode In Ecma 5,"<a href=""http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/"">Strict Mode is Coming to Town</a>

Douglas Crockford blogs about using strict mode in ES5. I am not sure how I feel about this yet. I can definitely see some advantages, but didn&#8217;t we try this with <span class=""caps"">XHTML</span> already? Definitely a topic to research.",2011-08-20 01:44:06.840319,2012-08-21 00:33:54.614797,,,f
9,Promote Dry Java Script Practices,"I’ve griped about jQuery plenty. Not the framework itself, it’s an awesome tool to have when doing front end work, but the code that many produce with jQuery. I like to call it <em>anonymous functionitis</em>. New developers see anonymous functions in jQuery code, assume <em>everything</em> should be done that way, and create code that doesn’t promote reuse. The code is full of functions that serve one purpose and need to be recreated if they are needed elsewhere. Another thing that bugs me is throwing everything in <span class=""caps"">DOM</span> ready. I mark this up as inexperience.

<a href=""http://blog.rebeccamurphey.com/"">Rebecca Murphy</a> has done a nice job of summing this up in her JS Conf talk <a href=""http://jsconf.eu/2010/speaker/the_jquery_divide_by_rebecca_m.html"">The jQuery Divide</a>. I think she is right; we need to educate those that write poor jQuery. But how?
<ul>
	<li>Teach the need to understand what jQuery is doing. New developers should dig into the code and learn how jQuery does what it does.</li>
	<li>Promote writing JavaScript without jQuery.</li>
	<li>Take a part of JavaScript (event handlers, animations, Ajax) and really explain how it works.</li>
</ul>

If those of us that understand the language, help teach those that do not, maybe we can  move the developer community forward.  With event driven JavaScript gaining speed, there hasn’t been a better time to promote the core language.",2011-08-20 01:39:21.613935,2012-08-21 00:33:54.63307,,,f
13,Automating Tasks,"I am experimenting with automating more tasks. I’m starting with my login for work. Every morning when I fire up my machine for work, I start a few programs. It’s not really a big deal, but I decided to venture into shell scripting to make this a command. My shell scripting skills currently suck.

The script is held in my code/helpers directory, so it needs to set the working directory to Applications so I can launch the apps I need. Once in the directory, I just launch the applications that I launch every morning.

<code># Open apps for work</code><br />
<code>cd ~/../../Applications;</code>

<code>open ""Google Chrome.app""</code><br />
<code>open Skype.app</code><br />
<code>open Mail.app</code><br />
<code>open TextMate.app</code>",2011-08-20 01:42:19.965599,2012-08-21 00:33:54.645468,,,f
20,A Better Blackboard,"Have you ever used Moodle? How about Blackboard? If you writhing in pain right now, say no more; I know you have you used at least one of them. If you don't know what they are, they are course based software. Easy right? Some interaction, distribute files, and collect files. Pretty common stuff.

I should come clean. I'm a bit of a UI snob, and even more of a UX snob. Now that I have that out of the way, let me say that these two software applications are amongst the worst I have ever seen, if not the worst.

It's bad enough that course instructors find it difficult to use, but think about the students for a minute. Imagine  being fairly new to technology and trying to use software that is unituitive and hideous. Students cringe when they find out that they have to go to one of these sites to accomplish some task. They will opt out if given the chance.

So what's a developer to do? Build a better tool of course. I've decided that I can't and won't subject my students to a frustrating experience interacting with me through some web interface. I'm in the planning stages of building a course management software tool. The key is that it isn't being built for colleges. It's being built for teachers and students. I plan on documenting my progress through this blog and what I learn while using it before handing out beta access to other teachers.",2011-11-06 15:14:14.952619,2012-08-21 00:33:54.671223,,,f
21,Textbooks In Html,"I came across an article yesterday that talked about how instuctors saved a university a boat load of money by creating their own <a href=""http://www.therepublic.com/view/story/1dbc25bcc4ae4060a421fa204e91c0c8/MN--Online-Textbooks/"">online textbook</a>. It makes perfect sense. ePub is just a subset of HTML and HTML is easy. You could just write it in markdown and compile it to HTML or ePub. Why aren't educators doing this? Especially in the technology area, web based technologies specifically. The book that I use for an Intro to HTML course is not good. It concentrates too much on the legacy stuff, and not enough on the progressive stuff. Legacy is important; rarely do we pick up an old project that has current markup, but we as also need to stress moving forward.

An HTML based ebook written in HTML is great project. I know, so meta. The book could be community based in a git repo with the best minds in the web design industry helping to update it and make better than any one author could. You don't have to be some specialized author to write books anymore. Self publishing is easy and open. I'd be interested in contributing to something like this. Here is my short wish list:

1. Interactive. Text areas that allow you to edit the HTML and see how it reacts.
2. Well designed examples. The current offerings have terribly designed examples.
3. Browser based with a responsive design. This book should be available on any device.
4. Downloadable in multiple formats. PDF, mobi, and ePub
5. It should start with the basics and move right on through the box model, into CSS, and finally scripting. I'm not sure if 3 separate books make more sense. Book length would be a good indicator,
",2011-11-08 13:18:50.297771,2012-08-21 00:33:54.672812,,,f
23,Back To Reality,"I finally get it. I thought I understood the importance of side projects, but I didn't. I thought that side projects were a way to try out new things or solve my problems, you know, scratch my own itch. That's wrong. If you work for someone else, side projects are vital to your sanity. You need them to stay current.

Side projects are a perfect place to start from scratch. A blank canvas. A clean slate. A fresh start. I can choose to use anything I want. Mongo, Rails 3.1 and the asset pipeline, Backbone, etc. Anything.

That's not the case when you work for someone. It's often just a job and you're constrained to what's there. They decide what you use, how it should be built, and if you're lucky, you get to express some creativity. Often times, there isn't room for creativity. You just have to stick with what is there.

It sucks, but that's part of the game. If this sounds sour, well, it is. Recently, I have been disappointed time after time. Just when I think I get to add something to a project, I hit a brick wall. It's been done, or there is some facet of the application that I was unaware of. That makes it almost impossible to get geeked up for work.

Will I regret airing my dirty laundry for the world see? Most likely, but it feels good to get it off my chest and the next time I foolishly think a project will be fun, exciting, and challenging, I have a place to go that will bring me back to reality.",2011-11-10 22:45:19.292296,2012-08-21 00:33:54.676308,,,f
24,Mongo Db Ids Sure Are Ugly,"I started on the Learn course management app and decided on using <a href=""http://www.mongodb.org/"">MongoDB</a> as a backend and have run into a few issues. The major issue that caused me to write a work around are the ids. They are very long, which is fine for security, but not very user friendly if you plan on using ids as part of your url.

Take this url in a MySQL backed rails app: learn.com/courses/3. In a Mongo backend, it would be something like learn.com/courses/4eb6a90621f63c3166000003. Yea, I know, ouch. Try giving that url to someone.

There are some slug gems, but I didn't see anything worthwhile. I just wrote a simple before_save method on the model. It downcases the title, replaces spaces with underscores and saves that as an url field on the collection.
<code>
 def create_url
 &nbsp;&nbsp;self.url = name.downcase.gsub!("" "", ""_"")
 end
</code>
I have to add some more logic to handle different characters like hypens and such, but it seems like a decent solution for now.",2011-11-12 17:02:25.159482,2012-08-21 00:33:54.679753,,,f
25,Redcarpet Is Stupid Simple,"Adding [markdown](http://daringfireball.net/projects/markdown/) has been on my very long list of todos for this site. I recently rebuilt this site in just plain 'ol rails. Partly because I thought it was the best system, but also so I can play. I really thought adding markdown support would be more difficult. I almost feel like I skipped something.

I went with [Redcarpet](https://github.com/tanoku/redcarpet) and it's as easy as storing the markdown in your database and making a few method calls in preparation for display.

    Redcarpet.new(post.content).to_html.html_safe

Really. That's it. I haven't even tossed that in a helper yet. As always, that's to Ryan Bates and [Railscasts](http://railscasts.com/episodes/272-markdown-with-redcarpet) for a great intro.

Now to add live preview like Stack Overflow.

",2011-11-18 02:24:16.597033,2012-08-21 00:33:54.678139,,,f
26,Open Source Cancer Research,"Cancer and cancer research is close to my heart. Like many other across the globe, I have a family member with cancer. In the beginning, I had a lot of questions and was extremely eager to help. But I had a problem. I am not a doctor or scientist. I have zero skills that can help find a cure for cancer.

Sure, I can build a website, but that's been done before. Those resources are already there. When I read the headline ""Open Source Cancer Research"", I knew it was perfect. Take the big money out and let the talented and qualified people that actually care about a cure collaborate transparently.

Take 12 minutes and watch this video.


<object width=""526"" height=""374"">
<param name=""movie"" value=""http://video.ted.com/assets/player/swf/EmbedPlayer.swf""></param>
<param name=""allowFullScreen"" value=""true"" />
<param name=""allowScriptAccess"" value=""always""/>
<param name=""wmode"" value=""transparent""></param>
<param name=""bgColor"" value=""#ffffff""></param>
<param name=""flashvars"" value=""vu=http://video.ted.com/talk/stream/2011X/Blank/JayBradner_2011X-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/JayBradner_2011X-embed.jpg&vw=512&vh=288&ap=0&ti=1256&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=jay_bradner_open_source_cancer_research;year=2011;theme=not_business_as_usual;theme=tales_of_invention;theme=medicine_without_borders;event=TEDxBoston+2011;tag=Business;tag=Science;tag=cancer;tag=medical+research;tag=open-source;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;"" />
<embed src=""http://video.ted.com/assets/player/swf/EmbedPlayer.swf"" pluginspace=""http://www.macromedia.com/go/getflashplayer"" type=""application/x-shockwave-flash"" wmode=""transparent"" bgColor=""#ffffff"" width=""526"" height=""374"" allowFullScreen=""true"" allowScriptAccess=""always"" flashvars=""vu=http://video.ted.com/talk/stream/2011X/Blank/JayBradner_2011X-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/JayBradner_2011X-embed.jpg&vw=512&vh=288&ap=0&ti=1256&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=jay_bradner_open_source_cancer_research;year=2011;theme=not_business_as_usual;theme=tales_of_invention;theme=medicine_without_borders;event=TEDxBoston+2011;tag=Business;tag=Science;tag=cancer;tag=medical+research;tag=open-source;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;""></embed>
</object>
",2011-11-18 17:51:55.290955,2012-08-21 00:33:54.681297,,,f
31,Extending Java Script Natives,"[Angus Croll](http://twitter.com/#!/angusTweets) again describes intricate parts of JavaScript like few can.

A must read for both sides of the native object prototype pond.",2011-12-21 02:28:54.883717,2012-08-21 00:33:54.687947,link,http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/,f
27,Facebook Required Apps Are A Bad Idea,"Requiring a Facebook account in order to register for an application is a really bad idea. I'll concede that there is a very large segment of people that don't mind, but for every person that doesn't mind, there are two power users that do.

First, Facebook is a privacy nightmare; they have the potential to track your every move across the Internet and they will if given the chance. This scares the hell out of me. I mean who wants everything thing they do on the Internet broadcast for everyone?

Second, you've now created a Facebook plugin. You are so tightly coupled to Facebook that you will have trouble decoupling that relationship and having your own app. My guess is that you will have to start over.

I'm good with Facebook integration, but give me a choice. Let _me_ decide if I want my information broadcast to Facebook. Apps should have their own identity and tie into other application as options, not requirements.

",2011-11-19 14:17:42.806532,2012-08-21 00:33:54.682862,,,f
28,Thankful,"Every Thanksgiving I think about what I am supposed to think about. What I am thankful for; it's been hard wired into my brain. But this year is a little different. I truly am thankful. This Saturday, two days after Thanksgiving, we will have a house full of family members. This is the first year we are giving my parents a break. No cooking, no cleaning; just relax and enjoy their time with the rest of the family. For this, I am thankful.

My kids are growing up so fast. One of them is off to college next year, another one not far behind, and one still in middle school. My wife and I know that our days our numbered. Soon they will be off to take on the world and we will in an empty house, confused as to what we are supposed to do with the just the two of us. For now, they are still living with us and we are savoring every second. For that, I am grateful.

I have a good job doing some pretty cool stuff. I get to program with Ruby all day and I have some nice freedom and flexibility in my schedule. I really couldn't ask for more. Well, that is unless Github calls, (Yeah right!). In addition to that, I get to teach some people about how to craft web applications in the evening, and I have the freedom to alter the content to what is happening on the web _right now_, for that, I am thankful.

Happy Thanksgiving.",2011-11-23 13:18:00.045464,2012-08-21 00:33:54.684714,,,f
30,Great Sites Inspire You To Do Something,"Every once in a while, I find a site that is way above average. A site that makes you think when you read something that is published to it. [http://swombat.com](http://swombat.com/latest) is one of those sites. I get inspired with every post I read. It reminds me of when I read [Rework](http://www.amazon.com/Rework-Jason-Fried/dp/0307463745/ref=sr_1_1?ie=UTF8&qid=1324318793&sr=8-1) and I wanted to drop everything and build something.
",2011-12-19 18:22:05.758966,2012-08-21 00:33:54.686414,,,f
36,Posting To Git Hub,"Every year I set some short and long term goals. Some goals that I think make me better professionally and personally. One of this year's goals was to build more internal applications. Apps that I use, but I don't release on the web, so I don't have to deal with authentication and other issues. This allows me to play with technologies that I haven't before.

I decided to release all of this code, regardless of how bad it is. The first project has been pushed to GitHub. I hate the title of the app and will change it soon, but in the mean time, [ProgrammersNotebook](https://github.com/ScottRadcliff/Programmers-Notebook) is up on GitHub with a minimal readme.

The application uses [mongoid](http://mongoid.org/) and [mongoid_fulltext](https://github.com/aaw/mongoid_fulltext) to search and generate a list of snippets that match what is being typed. An Ajax call fetches a formatted json collection of matching records and updates on every two keypress events.

More to come...",2012-01-26 01:48:43.127287,2012-08-21 00:33:54.689486,,"",f
87,Hybrid Rss,"I'm one of the ones that love RSS and have been thinking about it a lot lately. My problem is this. I like the Reader inbox style some, and I like the river style some. I need something in between.

I'm pretty confident that there is going to be a lot happening in the RSS space. A lot of really talented people are going to use RSS in interesting ways. And some already have. But I done like anything out there right now. The newspaper style escapes me. I don't get it and I think it's a terrible way to read my RSS sources.

Here is what I would like to have:

A river of interesting things to look at and read. All of my favorite things, updated every few minutes.

A way to act on these items. Share somehow, or save for later.

And way to view all items from a source so I can still keep on my favorite sources in case I do miss something.

I am fighting the urge to build this thing. I'm hoping someone builds it first.",2013-03-23 12:46:32.708953,2013-03-23 12:46:32.708953,,,
35,Working Too Hard,">>""If you are trying to be focused and ""productive"" for more than 30 hours a week, you are probably working too hard. You should consider reducing your workload to become more effective and get more done.""

>>""To avoid wasted work, you must allow time to observe the effects of what you are doing, reflect on the things that you see, and change your behavior accordingly.""

>>""You need to spend evenings, weekends, and holidays educating yourself; therefore, you cannot spend your evenings, weekends, and holidays working overtime on your current project. Do you really expect brain surgeons to perform surgery 60 hours a week, or pilots to fly 60 hours a week? Of course not: preparation and education are an essential part of their profession.""

_Olve Maudal_ [97 Things Every Programmer Should Know](http://shop.oreilly.com/product/9780596809492.do)",2012-01-20 01:39:02.273551,2012-08-21 00:33:54.698111,,"",f
37,Always Learning,"Working in my home office this Saturday and glanced up at the self above me. Three books caught my eye. ""PHP Programming with MySQL"", ""XML"", ""Programming with Visual Basic 2005"", ""Learning Rails"", and ""JavaScript: The Definitive Guide"". You should immediately notice an array of languages in there. The past two years I have gotten away from playing with different languages and technologies. This is a great reminder for me that being stuck in one language is extremely crippling, just ask _the_ Cobol programmer.

One of my short term goals is to play with new languages or frameworks that I wouldn't get a chance to play with during my work day. My short list includes, [Express](http://expressjs.com/) (Node), [Spine](http://spinejs.com/), [Lua](http://www.lua.org/), and [Clojure](http://clojure.org/).

It's easy to get complacent and forget to continually learn.",2012-01-28 15:25:37.920718,2012-08-21 00:33:54.699635,,"",f
33,Best Education Sites,"Courtesy of [Best Education Sites](http://www.bestedsites.com)

<a href=""http://www.bestedsites.com""><img src=""http://www.bestedsites.com/images/infographic_1024.png"" alt=""Schools That Rule the Web"" width=""500"" border=""0"" /></a><br />Created by: <a href=""http://www.bestedsites.com"">Best Education Sites</a>",2011-12-22 13:55:20.915713,2012-08-21 00:33:54.692949,,"",f
38,It Only Takes An Hour,"I've tried and left many half-finished side projects. The reasons vary, but more times than not, I _attempt_ to dedicate more time to the project than I have available. It usually goes something like this: ""I am going to work on _insert project name_ on Tuesdays and Thursdays"". The problem is that I plan on a 4 hour block. Say from 7 - 11. That leaves zero time for my family, and after working a day job all day, that's not really fair to them. The result is a project that sits half finished because the time requirement is just too much.

For about the past week or so, I have been setting aside one hour a day, from 7-8. That hour is for whatever side project I have at the time. I work on it for that hour, maybe I get the UI cleaned up, maybe I get a feature or two implemented. It doesn't matter. At the end of that hour I close the lid and watch TV with the kids, help clean up the kitchen,  or get some things done around the house And it has been eye opening. Focusing for an hour a day is extremely productive.

Of course this doesn't mean anything unless I release some of these projects. I can say I'm further along with an hour at a time than I ever was before. ",2012-02-29 18:19:40.089201,2012-08-21 00:33:54.69453,,"",f
34,Code Mash 2012,"[CodeMash](http://codemash.org/) was my first _big_ conference and I can see why conferences are so popular. Besides the great time I had at the after parties, hanging out with friends, and meeting new people; I took a few things away from CodeMash that will effect how I write code in the near future.

Using tools to evaluate complexity of code is a great way to catch problem areas before they become problem areas. [Saikuru](http://saikuro.rubyforge.org/) looks like the front runner for me.

A lot of Rails developers hate Rails helpers. I think it's because most people don't organize them well, and just throw all helper methods in application helper. Jeff Casimir has a gem for extracting view logic into classes versus helpers [Draper](https://github.com/jcasimir/draper). I'm not sure that is a good fit for me, but it's interesting and I'm curious where this type of thing is headed.

I should have went to me sessions that I knew nothing about. .NET, Java, etc.. Being that I read online a lot, most of the sessions were intro sessions that you can get from reading any one of many tutorials on a particular subject, like Node or Backbone.

I'm ready for January 2013!",2012-01-18 14:06:31.885744,2012-08-21 00:33:54.696215,,"",f
39,The Bubble Goes Pop,"The past week has taught me a lot about hosted/free services. First, all of my private repositories on GitHub were locked due to a billing issue. I felt bad for them, they are a great service and have had a hard time lately with DDoS attacks and such. I made sure my credit card was valid and asked support to resubmit. Failed again. I tried repeatedly over the the next few weeks until I gave up, used another card, moved all my private repositories to my server, and downgraded to free.

Not only have I been having problems with GitHub, there seems to be a rash of services either having problems or simply shutting down. Posterous was acquired and _will_ be shut down, Oink shut down their only service claiming they had to and plan on using my data for other projects (_err wut?_), and CopyCopter decided it wasn't profitable and it's closing. In CopyCopter's defense, they are open sourcing the code, which is a good move.

Now I am wondering why do I pay for a service? I pay for a service to make my life easier. Yes, more often than not, I could build it myself. But I pay for someone else to handle all of the details for me so I can do other things. I can host my own Git repositories, I can build my own blog platform, I can post what I like and where I got it, and I can write a service to update content in real time. That covers all of the services that I mentioned. I don't _need_ to pay for any of those services.

A bubble is getting ready to pop. People are going to start getting real gun shy about what is a legitimate service and what is a temporary hobby for someone. If you're building an app, and you plan on selling it, either monthly or a one time fee, you had better be in it for the long haul. Don't provide something and just close it down because it's not working for you. Your customers/users are counting on you to  provide what you promised.

I know I will __never__ pay/participate in a Kevin Rose service again. That was a coward move. It's a good thing he joined Google because he hurt his reputation a ton.

This is just the beginning. Other services will follow suit. I mean why not. It worked for _insert app name here_. They just shut it down when it became difficult. I am currently reviewing every service I pay for and dropping them before they drop me.

While I'm on a bit of a rant. Imagine this: You pay Heroku and use some service for your app. Said service decides that they no longer are producing enough profit and want to work on other projects and discontinue the service. You're in quite a pinch if that is part of your business. Find a replacement , build it yourself, or remove the feature. iit could happen and is starting to seem very realistic.",2012-03-16 17:51:12.955649,2012-08-21 00:33:54.701177,,"",f
40,Life Is Good,"For all of the complaining I might do. About my job, stress, money, etc. When I sit on the back porch looking over a beautiful country setting with a cold Guinness, I know life is just about perfect. It's important for me to be reminded of just how fortunate I am.

I have a great family, a great job, my kids go to an amazing school, and I get to build software every day, all day. Life is good.",2012-03-17 22:58:24.225861,2012-08-21 00:33:54.713227,,"",f
41,I Always Forget What Environment I Am In When Using Rails,"I finally got tired of making changes in the wrong environment. More often than not, when coding, I will have the production site up _and_ the dev site. I've editing the wrong one more times that I would like to admit. So I added a simple banner across the top when working in the development environment.

It's real simple.

<script src=""https://gist.github.com/2190678.js""> </script>

Then some simple CSS

<script src=""https://gist.github.com/2190688.js""> </script>

Now I have a decent looking reminder where I am at.",2012-03-25 01:55:45.848669,2012-08-21 00:33:54.715037,,"",f
88,Towards Zero Unemployment,"Once again, Seth Godin has made me think. Seriously, whether you like the guy or not, you owe it to yourself to subscribe to his blog.

He raises some good points about how employment became a *thing*

> A dozen generations ago, there was no unemployment, largely because there were no real jobs to speak of. Before the industrial revolution, the thought that you’d leave your home and go to an office or a factory was, of course, bizarre.

And what should be next

> I can’t wait until we return to zero percent unemployment, to a time when people with something to contribute (everyone)  pick themselves instead of waiting for a bureaucrat’s permission to do important work.

Source: <http://sethgodin.typepad.com/seths_blog/2013/03/toward-zero-unemployment-.html>",2013-03-27 12:36:46.755501,2013-04-18 19:31:44.48958,,,
42,Exposing Bugs With Tdd,"Today, I sat down to write a feature in an existing application that takes two csv files, parses them, and generates orders in the system based on their data. As I generally do with any code that I write, I thought about the problem for awhile, came to what I thought would be a decent solution, and started writing code.

How I write code has changed over time. I enjoy coding with TDD in mind, so I usually open or create a test file, and make comments about the steps that I think I need to take to complete the feature. And drive the feature out one test case at a time. Usually 2 - 4 tests, depending on complexity.

I was reminded again today of the power of TDD. While driving these tests out I found two bugs that I may have never seen. They didn't produce any errors, just resulted in missing data. Had I built the feature without any tests, I _may_ have spotted the bug, but it's highly unlikely. The bugs were very similar, so I will describe only one.

The bug existed with an after create callback. The callback expected 6 attributes, but I was only using 4, so I only supplied the 4 I needed. It appeared that records were created correctly, but they actually were not because all of the data was not being passed in correctly. The model file is extremely fat and the callback didn't have any comments and was not obvious.

Because my assertion was failing, I knew data was missing. This forced me to look a little more closely. This is a perfect example of a bug that slides through non TDD based development all the time.

By driving out a feature through tests I was able to expose bugs that were hidden by silent failures. There is no doubt in my mind that the users of the system would have found it in record time.

All code that I write has tests and documentation. I prefer both, for different reasons, but if limited, I will go with tests every time.",2012-04-03 00:22:44.137228,2012-08-21 00:33:54.71685,,"",f
43,Developer Professionalism Guidelines,"This post is a reminder to me of the importance of professionalism as a developer. It's way too easy to fall into a trap of quantity and speed over quality and deliverable software. The following is a (growing) list of things that I think are important in preserving professionalism when creating software.

* Never write code until you completely understand the problem.

* Strive for zero bugs in production code.

* Plan and write your code for simplicity and future collaborators.

* Empower users to perform tasks free of developer interaction.

Hit me up on Twitter if you have more [@scottradcliff](https://twitter.com/#!/scottradcliff)
",2012-04-03 23:23:32.294634,2012-08-21 00:33:54.718505,,"",f
44,Exploring A Code Base With Integration Testing,"I work with a lot of code that I don't understand. Going from file to file tracing the path of methods is not always the best method for understanding how a system works. 

There are a few methods for exploring a system. The console is a great option. Unit tests that create objects and check the values of the objects is another good method.Bug the best way I know for exploring an application that I am not familiar with yet, is integration testing.

Whenever I have any code to write to an unfamiliar code base, I can count on integration testing to reveal parts of the system that are unknown to me. My process is very simple. In true TDD/BDD style, I write the smallest amount of code I need to get some result. I will start with just a few steps; visit a page, fill out some fields, and maybe click a link or two and compare the actual result of my actions with my expected result.

This will reveal parts of the system that I didn't know existed, every time. 
",2012-04-05 01:02:39.756045,2012-08-21 00:33:54.739091,,"",f
45,Quit Crying And Build Something,"The latest exchanges about semicolons and testing on Twitter may have done me in. I don't seem to enjoy the service as much as I once did. I can remember having the chance to meet and chat with people that I otherwise wouldn't have had the chance to. Now it's just a hotbed of crying. Everything from ""_my testing process is better than yours_"" to ""_I'm too cool for semi colons in my JavaScrip_"". What an complete waste of time, and I suspect there are many like me that just don't care what everyone else is doing.

As a reminder for those that get caught up in the processes and tools arguments, a quote from the [Agile Manifesto](http://agilemanifesto.org/) (if that's your thing)

>Individuals and interactions over processes and tools<br>
Working software over comprehensive documentation<br>
Customer collaboration over contract negotiation<br>
Responding to change over following a plan

More and more, all I care about is working software. How we get there doesn't matter to me much. As long as I am confident in the code that I write, I'm happy. Sometimes that's acceptance tests with Cucumber; sometimes it's not. Sometimes it's unit tests at the model layer because the HTML and URL are unimportant; sometimes it's not. It's really, really simple. Use the best tool for job and don't worry about what Joe Programmer uses. You are ruining it for everyone else.
",2012-04-17 12:01:11.588453,2012-08-21 00:33:54.742759,,"",f
51,College Is A Stepping Stone,"I've been taking part in interviewing a lot of college students and recent graudates for an IT position where I work. I usually perform some sort of phone interview and to get a feel for if the person fits what we are looking for. I ask some pretty simple questions. Tell me about your background? How did you get into this field? Have you used Apple products; iMac, iPhone, etc? How are you with Linux?

They all seem to do pretty well until I ask what I think are the most important questions. _Where do you learn and how do you solve problems?_.  I am looking for some effort here. I get it. Your instructor/professor in college told you this and that, blah blah blah. That doesn't matter. How do _you_ know what's going on? Trends, patterns, new tech, etc..

What happens when there is a problem that you don't have the answer to? If your answer is to ask your peers, you're wrong. Google it, _then_ ask someone. Learn to solve problems on your own and don't be afraid to admit that you don't know the answer, Google knows, I guarantee it.


#### Put some effort into it

I have interviewed about 6-8 people. You know how many subscribe to _any_ RSS feeds. None. Not one. Every person that I asked how they stayed on top of the industry told me ""well, uh,  I watch the news"". 

Really? The news? So the news anchor knows what's happening in _your_ field before you do? Be ashamed. You're in this for the money, but it will never come. You don't care enough. 

When I am looking for help, I want to see that you care. That you get it. School is so far off of what it's really like that it's not even funny. It's just the way it is. But you have to try outside of that classroom.


#### Stay informed

If your looking to crack into the tech industry either as a network or software person, here are a few things to help you.

**Read vigorously.** Blogs (if you don't know what RSS is, shame on you), Twitter, HackerNews, Books, anything you can get your hands on. Read and never stop.

**Ask Questions.** Hit up StackOverflow, or SuperUser if networking is for you, and ask questions. You might get hollered at, but that's okay, the emotional wounds will heal. Don't be afraid of IRC either. It can be intimidating, but there are some smart folks there.

**Get Connected.** Join some user groups and attend some events. Introduce yourself. You should volunteer. You will learn more from other people smarter than you then you ever did in school.

**Play.** Just play. If your in software, build some apps to fix your problems. Build throwaway apps. It's okay, they will suck, but they'll get better. If your a networking guy, try some networking stuff. Try to automate some networking tasks. See what the ones you look up to are doing and copy them

Come to an interview locked and loaded. Prove that you are one of the best, even if you're not, yet.
",2012-07-07 14:20:06.558896,2012-08-21 00:33:54.75111,,"",f
49,The Most Thorough Linux Tips I Have Ever Seen,"The answers to the Quora question ""What are some time-saving tips that every Linux user should know?"" are extremely detailed. It's worth a few minutes to read through them if you need sharpen your Linux chops.

http://www.quora.com/Linux/What-are-some-time-saving-tips-that-every-Linux-user-should-know",2012-05-31 16:15:30.51158,2012-08-21 00:33:54.744402,,"",f
46,The Problem With Rss Is The Content Creators,"If there is anything that is going to kill RSS for me, it will be websites somehow resending *all* of there posts/articles. Several times I have ended up 20+ posts from one website all at once. This is the type of thing that will kill RSS, the content creators.

Oh yeah, and the '_click here to read more_' malarkey.",2012-05-01 12:24:16.34394,2012-08-21 00:33:54.746345,,"",f
58,Notes On Software Design,"It's up to me to direct the software that I write. It's easy for me to forget that. It's also easy to just jump into a code base and make a quick change because it's, well, quick.

Today I was after a small change. Easy enough. I just needed to add a an additional check to an if/else statement. First thought was to simply add an or to the statement. But then that little voice in my head reminded me of all of the times that one additional check turned into 3, 4, or 10.

I decided to pull that code out into a new class. Now as the requirements change, the class can handle it. I knew it was the right thing to do, even though it took longer than adding an or to the statement. I decided to design that code the way I thought it should be designed.

It's my job to drive the software. I dictate how long something takes. I dictate how something should be built. And I dictate when something is finished. Software design means a lot. ",2012-10-17 23:28:13.416986,2012-10-17 23:28:13.416986,,,f
48,Internet Famous People Usually Suck,"I have always thought it would be cool to be 'Internet Famous'. Looked up to by your peers, invited to speak
at conferences all over the world, and make a handsome salary. I have changed my mind. The reason?
Most of the 'Internet Famous' people I have had any contact with are jerks. It seems that they think if they haven't heard
your name or heard about anything you have worked on, you are not worth their time.

This could be just me, but the few of these type of people that I have reached out to are jerks (that is the censored version). I am confident that
I am not the only one that has experienced this sort of arrogance, and I am absolutely sure that I never want to be the
guy that is too good to talk to someone else.

It's sad in a way. People that are looked up to from others in a given community have an awesome opportunity to help people that
no one has ever heard of. An opportunity to help those that may be climbing up through the ranks to get better
at their craft, and in turn both people become better developers/designers/etc..

If you are one of the 'Internet Famous' people, take a moment and think about what taking a few minutes might mean. You never know, you
might actually learn something from someone who is beneath you.",2012-05-28 16:17:53.797182,2012-08-21 00:33:54.740814,,"",f
47,Rails Sessions Subdomains And Internet Explorer,"When using Rails, subdomains, and sessions; IE will give you fits. IE cannot handle the subdomains and the cookies that Rails uses to store session data. It will not produce any warnings. It just drops all session data because it considers it a cross-site request even through the TLD is the same.

Also worth noting that IE will remove any sessions from subdomains with underscores. This is why I named the session without any underscores in the Gist, just to be safe.

Quick fix. Make sure you pass the TLD prepended with a ""."" as the domain to the session config.


<script src=""https://gist.github.com/2570136.js?file=gistfile1.rb""></script>",2012-05-01 18:13:30.729286,2012-08-21 00:33:54.747927,,"",f
50,Dont Be Clever,"I need to rant a bit here. I've come across way too much _clever_ code. If your writing code that you think is clever, just stop it. Go back and make it clear. It's not clever, or cool, or creative. It just sucks and the person trying to figure out what you were thinking when you wrote it is ready to kick your ass.",2012-06-26 01:50:43.398064,2012-12-01 21:41:49.671372,,"",f
57,Using Git Blame To View Documentation,"I work with a lot of legacy code. And in that work, I often hit situations where documentation is either non-existent or vague. **No, method names are not enough**, but that's an argument for another time.

I have a couple of options here. I can grep through the commits looking for some common indicator that might give me what I need. Or, I can use blame to see who wrote this and hope it wasn't me. Git blame is a far superior option here, but generally I just call it with a file name. If you have never worked with legacy code, I'm here to tell you, the files are never small. They are always hundred of lines,  and that output is painful to sift through.

The fix is pretty simple. Call blame with a range

    git blame [filename]  -L 10,20


That will give me only the lines 10 through 20 in this given file. That output also gives me a commit hash. Grab that hash use it with git show and there are my docs, hopefully telling me why this code was written.",2012-10-02 19:27:10.516525,2012-11-24 03:37:58.019087,,,f
81,Programming Is Art,"Dave Winer has nailed the [essence of programming](http://threads2.scripting.com/2013/february/whyYouShouldLearnToCode) in response to the [code.org](code.org) campaign. In it Dave talks about programming for the love of the craft, and not programming for money.

He makes some good examples out of sports, music, and art.

> Suppose I said you should learn to play basketball because you can make a lot of money doing it. I wonder how Chris Bosh would feel about that. Or if I said you should learn to create music for the same reason?

> You don't learn an art to make money -- you learn it because it's fun and satisfying. Because it's what you were meant to do. You do it because you like it so much that it's what you want to do every day of your life. Because you want to get really good at it.

I love this. Programming *is* art, and to be an artist you have to *feel* something. I have to be driven to create software, and that  drive is never fueled solely by money.

Learn to program to create something amazing.",2013-03-05 15:47:21.876085,2013-03-05 15:47:21.876085,,,
89,What Is An Educator,"When I set out to build [Velocity](http://velocityapp.net), I had a certain vision I wanted to fulfill. I wanted to make the best software available for an educator. I know what an educator is to me, but sometimes I wonder if everyone shares my idea.

Being an educator is pretty simple. It has nothing to do with college degrees, formal training (although it does help), or age. All you need to have to be an educator is knowledge, and the desire to share that knowledge to those that don't have it.

That's it. There's no more. I could end this post right now, but that would be pretty boring.

## We are all educators
The guy that has been programming for 20 years and wants to show newbies how it's done. He's an educator.

The guy that has a associates degree from some college you never heard of, but has been working in the field for a few years. He's an educator.

Of course the guy with the multiple degrees is an educator.

But what about the guy that took a 6 month trip to Africa and learned their culture? Is he qualified to educate? Absolutely.

My point is we are opening new avenues for education. It's not always about classrooms, tuition, and professors. It can be about everyone.

If you agree with me, [sign up for Velocity](http://velocityapp.net) and we can teach someone something new in an awesome new way.",2013-04-11 13:41:37.153899,2013-04-11 13:41:37.153899,,,
90,Throw Out That Code,"At the base of almost every web application is authentication. The app needs to know who it's dealing with. Sometimes there are roles and sometimes not, but there is almost always authentication.

Needless to say, it's important to get authentication right. But not at the risk of adding something that doesn't seem to be working for you.

While building [Velocity](http://velocityapp.net), I ran into this issue. I almost always use [devise](https://github.com/plataformatec/devise) for authentication. I have to confess, I'm not sure why, I've used it since it was released. It just always seems to fit.

But this time it was a little different. I needed a little more control over authentication, and devise hides a lot of details. So I found myself looking up how to do simple things a lot, like customizing the sign in screen.

In hindsight, I should have stripped out devise after the first couple of times it seemed like the wrong tool, but I kept building and integrating devise deeper and deeper into the application.

## A Turning Point
When I get to the students feature, where an instructor can add students to a course, I started to really feel the pain. I finally decided to delete all that code I had written and replace it with something a little simpler and more easily customizable.

After replacing devise, I *feel* better about the code. It's easier to update and customize and is moving along much faster that it was before.

Don't be afraid to delete code that doesn't work for you. Use the right tool for the job.
",2013-04-12 12:46:12.852166,2013-04-12 12:46:12.852166,,,
130,The Art Of Business,"I have a confession to make. I actually like all the business stuff required while running a software company. I used to hate setting up meetings, chasing down leads, and all the other stuff that I have to do to make a living building software for other people. This time around it's different.

I guess I just started learning how to do it properly. It makes a huge difference in how I approach it when I know what to expect.

Here are a few of the things that I think make it more enjoyable.

Listen - When I started opening my mind to really listening to people and trying to help them with no strings attached, the conversation quality really jumped. I  stopped worrying about if I was going to get paid and concentrated on developing friendships.

Patience - Sales never close on one encounter. It could take 3 or 4 or 10. It depends. I stopped worrying about it, and started looking for ways I could help with their problems.

Be Picky - I learned I don't have to do business with everyone. Some people are a really bad fit for me and that's okay. They are looking for the cheapest labor they can find. Yes, some people see software developers as labor. Just a robot punching a keyboard. These are not the type of people I am drawn to, and when I stopped talking to them I enjoyed the art of business more.

I'm still learning, but it's more fun this time around.

Maybe failure is required the first time?",2014-03-22 17:32:13.469483,2014-03-22 17:32:13.469483,,,
82,Full Stack Developer For Sale,"I am looking for remote working opportunites. After a few years with my current employer, it is time for me to move on. I'm interesting in remote or contract opportunities.

I have 10 years experience building web sites/applications and 3+ years with Rails applications and Linux server administration.

If you know of a project or would like to hire me, email me at scott@scottradcliff.com",2013-03-12 14:25:02.912027,2013-03-12 14:25:02.912027,,,
107,Inspired,"I just learned about [Jonathan Mann](http://jonathanmann.tumblr.com/) and I've lost the last hour just watching videos and reading a few [Medium posts](https://medium.com/i-stop-being-afraid-of-making-something-bad-and/f6213db2d90d). Wow.

I've played guitar for years, and have tried writing songs before. I failed every time. It's extremely difficult.

The courage it must take to just release something everyday that would take most people several days to fine tune blows my mind.

",2014-01-02 23:04:41.613481,2014-01-02 23:05:33.766613,,,
108,You Probably Suck At Writing Maintainable Software,"If there is one element of software that no one ever wants to do, it's maintaining it after it's built.

I can see why. Building is fun and maintaining what's already done, and most likely built by someone else is not.

It can get really bad if the one building it doesn't think about the one maintaining it. If you've ever been the maintenance guy, you are nodding your head right now. You may even be thinking ""At last! Someone feels my pain!"".

If you are the guy building and passing it off to someone else, it's easy to do some really small things that make maintaining software less painful. And in turn make the maintenance guy love you, or at the very least, like you a whole lot.

## Documentation

I know, I know. Writing docs is not fun. You don't need a lot of documentation, but a comment here or there really helps. Bonus points for comments with examples.

If you are shaking your head in disbelief right now about the notion that I would even suggest you cheapen your awesome code with comments. Know this. Your code isn't that great. Sure it may look awesome now, and you may sit back and grin at the genius of it. The next guy won't think it's so great. The next guy doesn't have context around why it was needed or why it had to be programmed a certain way. Communicate those details.

It's not just comments. [A living README](http://tom.preston-werner.com/2010/08/23/readme-driven-development.html) is a great place to add examples and details about the project.

We've all seen the blank README. Or even worse, the default Rails README.

The key here is to error on the side communication.

## Verbosity

Let me get this out of the way. [You are not clever](http://scottradcliff.com/post/dont_be_clever).

That super cool method that your wrote that handles several conditions in one place is a monster to understand. Other developers have no idea why you would need to have all the logic in one place.

I'm sure your chest swelled as you wrote this amazing thing that was clever and smart. Unfortunately, you are the only one that thinks so.

Error on the side of verbosity. If you have the option of chaining a bunch of things together, or separating them into a few lines, choose the clearer option and show me some examples of how it works.

## Weekly Self Code Review

Here is one thing I have started doing. Set aside some time each Friday to read through the code you have written during the week. Anything that isn't immediately clear, add some examples/docs for it. Try explaining it at a high level. Can you explain what it does in one sentence? If not, maybe it's time to refactor and make it clearer.

If you have not tried going back and reading what you have programmed. Even if it's just a couple of days later. Try it. I guarantee it will change the way build software.
",2014-01-07 17:08:42.968482,2014-01-07 17:09:11.109557,,,
132,Sign Pdfs Digitally,"Today I learned that you can sign documents with Preview and your webcam on a Mac. This is perfect.

<iframe width=""560"" height=""315"" src=""//www.youtube.com/embed/HcwJzt1Jb8Q"" frameborder=""0"" allowfullscreen></iframe>

",2014-04-06 18:27:39.166147,2014-04-06 18:28:00.652629,,,
133,Dont Deploy On A Friday,"Should I deploy on a Friday?

<blockquote class=""twitter-tweet"" lang=""en""><p>Should I deploy on a Friday afternoon, a handy flowchart <a href=""http://t.co/ycvEcqlHs3"">pic.twitter.com/ycvEcqlHs3</a></p>&mdash; Andrew Ducker (@andrewducker) <a href=""https://twitter.com/andrewducker/statuses/451296684438736896"">April 2, 2014</a></blockquote>
<script async src=""//platform.twitter.com/widgets.js"" charset=""utf-8""></script>",2014-04-07 11:54:48.406183,2014-04-07 11:54:48.406183,,,
83,Setting Constraints,"In the design community, setting contraints is quite common. I don't hear about it as much from programmers, but I'm starting to think that I should.

As many programmers can attest to, I have a growing library of half-finished projects. Everything from RSS readers to bookmarking tools. Every time something pisses me off, I fire up my editor with the intention of building my own.

I started asking myself why these projects sat; unfinished and private. It's fear. Releasing software is one of the scariest things I've encountered. Not releasing software for work, but releasing something that I wrote for me. It's scary as hell, and that's why programmers have directories full of these projects.

So I asked myself a question. What if I had a deadline? I know, terrible word, but stick with me here. What if I set a contraint of two days? Say I'm building an RSS reader (I'm on a bit of a RSS kick), and I start on Friday with the constraint of stopping by Monday. No matter what, Monday it's shipped. How would that effect my decisions and work flow? Would it break that fear? Would I grow as a software developer?

I bet the answer is yes.",2013-03-18 14:32:09.147345,2013-03-18 14:32:09.147345,,,
127,Progress Via Css Frameworks,"I'm starting to think that I feel the same way about [CSS
Frameworks](https://en.wikipedia.org/wiki/CSS_frameworks) as I did
about MVC frameworks. There is a love/hate relationship with a bit of pride
mixed in.

I love the fact that [Bootstrap](http://getbootstrap.com/) and
[Foundation](http://foundation.zurb.com/) give me a base to work off of. I can
grab what I want from the framework and override the things I don't like.

I don't like the fact that the syntax is often bloated and ugly. I also don't
like the fact that I can write the CSS myself. I have been doing it for years.

This inner struggle is nothing new. I did the same thing in my PHP days when I first started to encounter MVC frameworks. The frameworks seemed logical to me, but I felt that I didn't need them. I had been building sites without them for a while and that was just how I worked. However stupid it was, I built the sites from the ground up everytime. Sure I had little snippets of code I had saved, but for the most part I built it by hand everytime.

A part of me felt that these frameworks were simply a crutch and any respectable programmer wouldn't think of using something when he could just program it himself. Another part of me feared that if I used these tools I would forget how to program these things.

The truth is that it's progress. Eliminating the need to write the same code over and over is a step forward. By using [OSS](http://en.wikipedia.org/wiki/Open-source_software), I allow myself to worry about bigger problems. I think I've grown by not worrying about wiring up forms or writing raw SQL, even though I can.

I think it's still important to know these things, but less important to worry about writing the same things over and over.

Aw crap, I think I've just convinced myself that I would be crazy not to use a CSS Framework. It is progress and if I miss writing CSS, I could use that time to work on more advanced CSS.

Progress is a good thing.
",2014-03-19 18:08:52.1764,2014-03-19 18:08:52.1764,,,
128,Microsoft To Add Open Source To Mvp Program,This is pretty cool and a good example of some the things Microsoft is doing to embrace Open Source. [Changes in the Microsoft MVP Program - MVPs for Open Source Contributions](http://www.hanselman.com/blog/ChangesInTheMicrosoftMVPProgramMVPsForOpenSourceContributions.aspx),2014-03-21 01:15:45.096294,2014-03-21 01:41:41.513451,,,
134,Speaking At Self Conference,"I have had this issue for a few years regarding conferences. The issue is that I
think, at a certain point, a person passes from listening to teaching. A sort of
enlightening moment. After so many talks, I think most people start to wonder if they should be speaking.

I thought that was the case with me and made it a goal in 2014 to start speaking at conferences. I had no idea what I would present. Just that I wanted to give it a shot.

When [selfconference](http://selfconference.org/) came around asking for speaking submissions, I thought I would give it a shot. And for some strange reason I thought about sharing my experiences teaching programmers with little to no experience how to program. This would be pretty easy for me. I'm basing this off of my own personal experience, with some lower level concepts mixed in.

My talk is titled [Teaching Programmers Through
Empathy](http://selfconference.org/speakers#Scott-Radcliff) and is a walk through some of the things I've learned, some of the concepts I've used to teach in that setting and of course some of the failures I've had.

I'm not super qualified to talk about this subject. I don't have some teaching degree. I just have a two-year business degree and some University credits towards teaching in a technical setting. Even then, I didn't finish the University degree. I came close (who doesn't), but I did not finish.

What I have done is design and teach a web development program for three years before I decided to move on. I taught the usual things. HTML, CSS, JavaScript, and some ActionScript when I was forced.

It sure was rough in the beginning, but I caught my stride after the first year. Teaching someone a programming language when they don't understand programming logic is challenging. But you start to find signs to look for to know if you've gone too far.

## So What's in the Talk?
From the Abstract:
> There is a saying that those that can’t do, teach. Nothing could be further
> from the truth. In fact, teaching may be one of the more difficult things
> you can do as a programmer. Once you start to think about how to explain
> complex topics to a beginner, you start to realize how far you’ve come and
> how difficult it is to explain what you know.

> In this talk, I will share my experience teaching web development to those
> that have little to no prior experience. Topics include creating and
> maintaining a safe learning environment, using real examples to make
> concepts more concrete, and teaching how to learn and not always how to do.

Besides sharing some of my experiences, I want to touch on the three pillars of teaching.

* Safety
* Collaborative Learning
* Authority

## Who is the talk for?

#### Mentors

Have you ever had to show a junior developer something? Maybe you had to explain a design pattern to someone that had no idea design patterns for software development existed. After your initial shock of realizing that a developer doesn't about the GoF, you attempted to explain some of the concepts. Maybe it went fairly well, maybe you were frustrated beyond belief. Either way, this talk is for you. With any luck, after the talk, you will be able to understand a little more what it must be like looking into the giant world or programming,
and be able to teach a little better.


#### Teachers

There are a lot of workshops and courses from everything like web developer bootcamps to just learning Rails or some other framework. These workshops are a ton of work. If you have ever taught one of them you know the plan gets tossed out by the second lesson.

After this talk, you will have the knowledge necessary to adjust quickly while keeping your main objectives in place.

Even if you know all about how to teach in a technical setting, my hope is that you can pick up one thing. Or at least bring up good points for discussion.

## We are all educators

The last point I want to make is this. **We are all educators**. Every last one of us. The face of education is changing. The Internet allows any person to find an enormous amount of information. Given that information is available, College
isn't always the right answer. Some people just want to know how to build a website, or how to make a poster, or how content marketing works. If you know one of these things, you **are** the teacher. You can educate your peers. And you
will learn more than you ever thought you would.

I invite you to teach your peers and help shift education as you know it.
",2014-04-25 14:40:48.517504,2014-04-25 14:41:46.291283,,,
52,Preceived Speed Of Software Development,"I have trouble thinking of something in software development more troubling than the illusion of speed. When one developer cuts corners to get things done _fast_, a few things happen than make things for other developers more difficult.

1) Code is difficult to read and understand
When things are done a little too quickly and corners get cut, you end up with what is equal to a code band-aid. A quick fix, often near a comment that says 'FIX ME' or 'Hack', which  will soon grow into a big wound. A large problem area  that requires surgery.

2) Managers, stake holders, etc... think that the speed is normal
When a developer is able to bust out code quickly, those around them assume that this is the expected turn around time. The next developer is held to that standard, and when it's not met, it's often assumed that the new guy isn't as good as the last guy. Non-developers rarely understand the dynamics of testing, refactoring, and cleaning up all those FIXME areas.

3) The quality suffers.
When a developer knows that a quick fix will get this request off his desk so he can work more important/fun things and throws in a few lines, commits it, and deploys it. It's almost always someone else that has to clean it up.

#### The Fallacy of Speed
There is a pattern here. Quick fixes make other developers around you suffer. Naturally, the new developers wonder if they can trust anything with your name  on it.  Git blame becomes their best friend and they start to assume that everything is a quick fix.

Quick fixes are also a lie. They are cancer to an otherwise healthy code
base. There are no quick fixes, only well thought out solutions to problems
solved through programming. This is why simple code is so diffucult. It's the
thinking part that is difficult.


#### Stop Patching and Start Thinking
Stopping the quick fixes and speed illusions are difficult. Quick fixes are
easy. You see a problem, have a thought of what _might_ work, and slap it down.  Often, there may be other underlying issues that aren't obvoious right away. Those issues are not caught because not enough thought went into it. The only way to improve the code base is through thinking. Maybe it should TDD (Thinking Driven Development).",2012-08-15 17:30:42.60986,2012-08-21 00:32:40.459928,,,f
1,Show Your Code To Someone,"I’ve heard it said before. Show someone your code. Sure, its a great idea, but there is always a self asteem element there. What if they laugh at my code? Maybe my code sucks? Get over it. You will pick up more in 5 minutes of another developer looking at your code and asking why you coded things the way that you did, then you will from any blog post, book, or video.

Two minds are always greater than one. I don’t mind someone questioning my methods. Its enlightening to hear how they would have done something, or how they currently do it. Show someone your code and I guarantee you will either pick up a new, possibly easier way to perform a task, or discover a tool that already does what your trying to do.

This is the same reason I’m so intrigued by pair programming and hopefully someday I will get to pair with someone much smarter than me. The next time you are ready to push your changes or launch a feature, show your code to someone. You will be surprised.",2011-08-20 01:02:32.86794,2012-08-21 00:33:54.548109,,,f
2,"Be Passionate, But Know Your Limits","We are all passionate about something. The obvious one for me is web development. Any development really. Okay technology in general. As a developer, I enjoy coding sites and applications that push the boundaries of technology. It’s the future and we are all part of it. When I was given the opportunity to teach others these technologies. Teach the things that should be taught, and the opportunity to help craft a curriculum that will produce better prepared web professionals upon graduation, I jumped on it.

Of course I had to understand that it’s a slow process. It takes time to change. I helped craft courses like utilizing front-end frameworks, version control, actually publishing a web site, (you would be amazed at how many graduates do not know how to do that), and some advanced HTML and CSS3 stuff. Sounds great doesn’t it? In two years I haven’t taught any of them. I’m not even sure they have been offered. You know what I have taught. Flash. Three times to be exact. Guess how many times I have used Flash outside of that course. If you guessed zero, you win. You know why? Because it’s slowly becoming obsolete. Now I have to ask myself, how many times am I going to teach a dead technology that I despise in the hopes that I get to teach something more progressive? When do I say I have had enough of teaching this. Maybe colleges refuse to change and I can help teach through other channels. There is a new not so secret developer community starting up, eventually. Maybe that is the medium to help the industry keep moving forward. I think I see why most good developers do not teach.",2011-08-20 01:04:57.525586,2012-08-21 00:33:54.584997,,,f
4,All About Comments ,"Commenting code when I know I will not be returning to it has got me thinking. Firstly, as I finish out this week at my current job and know that someone else will be editing this code in the future; actually, they will probably be finishing the code. I have been writing some really detailed comments. Some of them may be too detailed, but that’s okay. I would rather the next developer look at a comment and think that it was unnecessary, rather than wondering what that code does and spending time decyphering each line to get a grasp on the purpose. I haven’t went as far as

<pre>
<code>
$i=0 // Set variable i to 0
</code>
</pre>

That would be really stupid. But I have written:

<pre>
<code>
// Create an array to store values for different education classes
$classes = array();
</code>
</pre>


I know classes is pretty self explanatory, and I could have named the variable education_classes, but just one comment that takes up no more than one line makes it perfectly clear that this does. Here is another example:

<pre><code>
// filter through options extracting the value
// and applying it to the classes array
foreach($query-&gt;result() as $item) {
  $classes[] = $item;
}
</code>
</pre>

Again, it’s pretty self-explanatory, but when someone hits this code for a quick change or is looking for a possible bug it should help them scan the file looking for the section they need. Of course I have PHP_doc comments for methods and classes. As I look over the code I have written this week I question my comment writing on projects that I know I will return to. I usually do not comment like this and it has burned me in terms of time. Reading each line of code to determine where the culprit of a bug may be is much more time consuming than just scanning the comments.

I say apply too many comments rather than too few. If the other developers that you work with do not like them, they can choose to not read them. My guess is even if the comments seem excessive, they will be useful in that one instance that may save you at 5:00 on a Friday.

Worth noting that this style of commenting has to be kept up to date. Read your comments often, and edit when necessary.
",2011-08-20 01:13:36.000696,2012-08-21 00:33:54.59314,,,f
53,Test,testing,2012-08-21 00:23:06.888965,2012-08-21 00:34:11.721286,,,t
12,Learning Web Design,"As long as I can remember w3schools have been around and honestly I had no idea that it was not part of the official W3C. Recently a movement has been started to bring awareness that the information at w3schools is inaccurate and that the wrong information is worse than no information. While I do agree that information should be accurate, I wonder where new designers and developers to web design will get their information. Surely we can’t expect them to go through the actual documentation. Even seasoned pros find that painful to sift through.

W3schools helped me quite a bit starting out. I don’t think the name was as much of a factor as the content. Even the fact that some of the content was inaccurate didn’t hurt me when I was starting out. It helped me get started quickly; as I learned more I expanded my resources.

<h2>Where should a person go to learn the syntax for making web sites?</h2>

I have spent some time searching for a suitable replacement. There isn’t one. Okay, let me rephrase that; there isn’t a <strong><em>good</em></strong> one. There are plenty of resources available, but they are fragmented at best. If someone that has experience is looking for documentation and knows what they are looking for, these resources work. But what about the person that doesn’t know what they are looking for? That person only knows that they want to do it the <em>right way</em>; the web standards way. Where do they go?

<h2>It’s time to build a better system</h2>

<a href=""http://w3fools.com/"">http://w3fools.com/</a> makes mention of the community building a better system, but then shies away from the idea as if it is not possible. I believe it’s wrong to shy away from it. If we as a community are going to call an organization out because they have inaccurate information, we <strong>have</strong> to build something better.

<h2>Initial ideas</h2>

Here is what I think the new system has to have
<ul>
	<li>A way to see immediate results with the code you are looking for. This is the one thing that I loved about w3schools; I could get immediate feedback with what happens when I do [x]. Those little text editors are a great learning tool.</li>
	<li>Up to date documents that are completely searchable. I think <a href=""http://apidock.com/"">http://apidock.com/</a> does this well. As does <a href=""http://railsapi.com/doc/rails-v3.0.3/"">http://railsapi.com/doc/rails-v3.0.3/</a>. Something like that would be great, but with full text search.</li>
	<li>Newbie friendly.</li>
	<li>Editable. Similar to a wiki. I think this helps avoid the outdated problem, but raises another one in sources. Sources would have to be displayed for it to be credible.</li>
</ul>

That would be a good start. I certainly couldn’t do it myself, but would be willing to jump in and help. I just can’t see complaining about something without action.

If someone has already started something, I would love to hear about it and participate.",2011-08-20 01:41:23.770785,2012-08-21 00:33:54.647547,,,f
22,Better Test Cases,"The single most important thing you can do to help your code is not just to test, but to use a good test case. Bugs often sneak through a vague test case. For example, let's say I want to test that when a new customer is created, the url for the customer is prefixed with the proper http protocol. I might write something like this:


<code>
def test_url_is_prefixed
  &nbsp; &nbsp;customer = Customer.create!(:url => ""scottradcliff.com"")
  &nbsp; &nbsp;assert customer.url == ""http://scottradcliff.com""
end
</code>

Assuming I have a before save filter, this test will pass. But it's not a good test. It's simple and to the point, but this test case needs another test. What happens if an empty string is sent? Then ""http://"" gets returned and the feature is broken, but the tests pass. Add another test case.

<code>
def test_url_is_not_prefixed_for_empty_string
&nbsp; &nbsp;customer = Customer.create!(:url => """")
&nbsp; &nbsp;assert customer.url == """"
end
</code>

Now I have handled a more specific test case. I wanted to use the term scenario instead of test case, but that is synonymous with cucumber. Scenario is really a better term. When testing a method, I am usually testing a series of test cases, but I always keep mindful to keep my tests short. Always ask ""What if...""
",2011-11-10 01:06:04.602941,2012-08-21 00:33:54.674347,,,f
32,Java Script As A First Language,"How do you feel about JavaScript being taught as a first language? John Resig has a great post about the subject. He goes into detail about why he thinks it would work. I have a few thoughts also.

[http://ejohn.org/blog/javascript-as-a-first-language/](http://ejohn.org/blog/javascript-as-a-first-language/)

**Prototypical Inheritance**

Prototypical inheritance is  different from classical inheritance I'm still not sure I completely I understand how it works. Teaching prototypical inheritence from the start sure does have an upside. For starters, it gives a developer a great start with a language that is poised to have a solid future. Who knows where JavaScript is going from here, or what other technologies are going to branch off from it.

The bad side is that server side languages are vital to anything serious and I can't think of one that uses prototypical inheritence. It could be difficult for a developer to wrap their head around common design patterns. MVC specifically.

**Strict data checking**

John mentions not even introducing == as a method for performing any type of data checking, and instead use strict checking (===) for everything. I love this idea. I can still remember when I learned that I could create an if statement  in JavaScript without any curly braces. 

I remember it well because I was not taught that I could. Not because my instructor didn't know, but because he thought it was bad practice to leave them out. I do leave out braces occasionally, but never without thinking if I should be leaving them out.

**Function literals**

>>""Makes it easier to understand functions as an object. I've found that when you show new developers a function being assigned to a variable it suddenly becomes much more obvious that a function is actually an object and can be manipulated as such (and that a function can be passed as an argument to another function). Thus students are advanced along the path towards a better understanding of functional programming.""

Coming from function statements in every language I know, function literals were difficult for me. Once I grasped the concept, tossing around anonymous functions started making more sense. Teaching tossing functions around from the beginning can be quite powerful.

John is a very advanced JavaScript developer that always seems to have revolutionary ideas. Worth the time to read.",2011-12-22 01:47:26.859999,2012-08-21 00:33:54.69106,,"",f
54,Git Blame A Small Section,"I work on a few large projects and there are times when I need to see some details about a section of code. Not necessarily who wrote it, but more when it was written or what commit it is tied to. Often commits have the best docs.

    git blame [file] -L start, end

This will return each line you requested from the start line to the end line, in the file you asked for. Each line will contain the commit sha, date, and name of the person who committed it.

A great way to grab a small section without loading the whole file in your terminal window.",2012-08-21 12:24:09.605825,2012-11-24 03:37:10.822069,,,f
129,Developers Thinking Out Loud,"There are a few developer blogs out there that I really follow. Frankly, some of them are just boring. This one is probably included.

I love Brent Simmon's blog. His posts are often just thinking out loud. A great way to see how other developers think through problems and solutions. I wish more developers would just type what they are thinking and hit publish.

I should probably do this more.

[Go read Brent's stuff on The Innessential](http://inessential.com/)",2014-03-21 16:06:56.467769,2014-03-21 16:06:56.467769,,,
55,Comments As Context,"I recently had the rare opportunity to edit some old code that I left behind. I expected to be embarrassed, and I was, but I found something a little unexpected. The comments that I had written were superb.

The comments were superb because they gave me context. They were documentation. I knew why I wrote that code, what it did, and what my inout/output was expected to be. This is real simple stuff that I somehow convinced myself that real programmers don't need.

I admit it. I drank the kool aid. I bought into comments being unnecessary. A code smell. Something that novice programmers did because their code wasn't clear enough. While I do believe that code should be _somewhat_ self-documenting, a few lines above each method and/or file take almost no time to write and help the next guy dive in quickly. Remember, that next guy might be you, even if it's your code.

I won't go into how inline comments are the worst comments, and this is how you end up with stuff like **# Hack** or **# Fix me**, but I do encourage you to write a comment block above each method first. Before you write any code. List the input expected, including parameters and data types, and the output expected. Also include an example of how it's used. Not only will this help with the design, but will help you later on down the road.

Lastly, have a look at [tomdoc](http://tomdoc.org/). As usual, Tom Preston-Werner is onto something here. The only thing that might be missing is the date and time the method/file was created/edited. But names and dates have been replaced with solid commit messages.
",2012-08-23 00:28:53.549132,2012-08-23 00:30:44.00903,,,f
135,Teaching Programmers Through Empathy,"I gave my first conference talk on May 30th at [Self Conference](http://selfconference.org).  I presented on teaching programmers. I touched on four topics.

- *Safety*. Creating a safe learning environment is huge. I went over what this means and some techniques to use.
- *Authority*. Authority is all about becoming a reliable resource. I also touched on some techniques here.
- *Collaborative Learning*. I probably spent the most time on this. It's so important.
- *Mentorship*. I closed out talking about how you continue to teach after the course is over.

It went pretty well, and I think creating an effective environment for teaching is a great topic. Something we should definitely should be talking about more.

Remember , [We Are All Educators](http://10pixels.net/post/we_are_all_educators)

<script async class=""speakerdeck-embed"" data-id=""4f3cf690caef0131c4bf4e91c40e8f54"" data-ratio=""1.33333333333333"" src=""//speakerdeck.com/assets/embed.js""></script>",2014-06-01 14:46:27.161833,2014-06-01 14:47:10.238763,,,
56,Small Decoupled Frameworks,"I've been playing with [Sinatra](http://www.sinatrarb.com/) lately. I had forgotten how awesome it is to work with. There are a few things that I really enjoy about it, and has got me thinking that maybe Rails is too tightly coupled.

1) Sinatra is great at remaining small and only pulling in what you need.

2) If there isn't something baked into Sinatra, I have been able to find a gem for it that works for my needs well. [Rack Flash](https://github.com/nakajima/rack-flash) is a good example. When I need flash messages, it fits my needs.

3) Setting it up how I want it with  Bundler, Rack, etc.. is a good lesson in getting back to basics for me.

Rails is no longer a no-brainer for me. It's not that Rails is not a great framework; it definitely is. It's just that I typically don't need or want all that comes with Rails. Notice I didn't say all that Rails gives me. I don't really see it as Rails giving me tools as much as I see it as baggage that I have to deal with, or ignore.

I'm coming back around to small, decoupled frameworks that allow me to get up and running quickly.
",2012-08-29 23:54:26.173423,2012-09-05 01:53:57.638275,,,f
59,Apple Wins At Marketing,"I stood in a Verizon store yesterday as my 16 yr old daughter was looking at ""touchy"" phones. It was time for an upgrade. As we looked around the store for the best phone for her, it reminded me when the camera took over the cell phone industry and those that didn't want a camera were screwed. Mobile phone manufactures didn't see profit in phones without cameras, so they quit making them. That is where we are with smart phones. They dominate the shelves, mostly Android devices.

The problem is that every one of them is different. My daughter was completely confused. Every time she walked up to one, she would say to herself ""how do I unlock this one"" or ""how do I type something"". You see, almost everything is different on each of them. Some just slide up to unlock, some you have to slide a puzzle piece into another puzzle piece (Yes, really), and even some have another odd way of unlocking.

It gets more interesting once you get past the unlock screen. She would touch it, and it would be do, well, nothing. It would just sit there for a few seconds, and then finally respond. She became visibly frustrated with the Android experience. Never the less, we decided on a couple models to choose from, all with some rebate in the form of credit for Verizon.

When we finally got a chance to talk to someone, we went through the paces. This one has a $79.00 rebate, this one is free with a 2 year plan and a $50.00 rebate. Or… you can get an iPhone 4 for free. Say what? Did you just say that I can get a phone better than any phone you have on display for free? SOLD.

That's where Apple kills it. A phone from two updates ago is still better than anything currently offered that runs Android, and it's free. We are now a three iPhone family and Apple gets a lot of my money. Well played Apple.",2012-10-29 14:42:49.71448,2012-10-29 14:42:49.71448,,,f
60,Autotesting With Guard,"Creating a Rails application with Guard auto loading my tests is way more fun I anticipated. I am in the middle of upgrading an old Rails app that doesn’t have a very modern toolkit with it. There are very few acceptance tests, no auto runners for detecting and running tests, and most of the code would have to be converted to run on Rails 3 or 4 anyway. 100% rewrite material.

I figured I might as well try out Guard considering I have a lot of tests to write to make sure all of my bases are covered. This particular app is central to this company and if it’s missing a core feature I’ve got problems.

So my current workflow is to place my terminal screen on my MBP screen while my editor is on my external display. I’m not sure why I didn’t try this before. It’s almost like a game. I can make some changes, save the file and just glance over at the terminal. I don’t even have to CMD-Tab to the terminal screen, just look over there and see where I need to head next.

I was previously a fan over running my tests in my editor, but I’ve got to say this makes working in these apps fun again. If you haven’t tried [Guard](https://github.com/guard/guard), you should really give it a shot.",2012-11-09 20:36:18.414643,2012-11-09 20:36:18.414643,,,f
62,What Defines A Quality Developer,"I think we, as a community, have an issue with software developers and education right now. It's no secret that new developers with formal training are not learning the right things.

As a developer without a CS degree, I would argue that you don't necessarily need a formal education to be a quality developer. Although, I did need a *push* from a 2 year community college to get me started. It was pretty difficult to wrap my head around programming initially.

##### Stating the problem is easy
I sat in on an excellent discussion that was mostly a panel of people interested in progressing software developer education and communities. The panel was great. A lot of indicators of what's wrong with developer education. The panel members were able to define the fact that most developers today are not high quality craftsmen, unfortunately, they seemed to be unable to define definitive indicators as to what makes a quality developer.

##### Let's define quality
I'm a quality developer and I surround myself with quality developers. Because of that, I think I can start to define what makes a quality developer.

A quality developer is:

* One that critically thinks about problems and composes efficient solutions that are easy to understand, update, and modify.

* One that uses source control to maintain branches of a solid working state and an actively developed state.

* One that separates code into a logical structure of classes and methods that perform a task simply and definitively.

* One that documents his work for the next developer. (Not necessarily comments, but it can be)

* One that sits just outside of his comfort zone and pushes his abilities daily.


This is in no way a complete list, but I propose this list gets us talking. I'd like to see this conversation go from saying most developers suck, to saying these are the things that make a developer a professional craftsman.




",2012-11-19 19:48:40.973708,2012-11-19 19:49:08.754457,,,f
61,Migrate Dev And Test At The Same Time,"I finally got tired of migrating each database whenever I added a change to the schema. So tired, I finally added a alias.

    alias migrate='rake db:migrate; RAILS_ENV=test rake db:migrate'

Now I just run migrate on the command line and both DB's are up to date.",2012-11-09 21:15:20.342346,2012-11-24 03:36:25.185144,,,f
63,Too Scared To Succeed,"I have this little voice inside my head. It's usually pretty quiet, but every so often it speaks up. It reminds me that what I'm thinking about trying *might* fail. I *might* be laughed at. People *may* talk about how stupid my idea is. I could embarrassed for years to come. The list goes on and on, and I listen.

I always listen. I start thinking ""*Yeah, what a dumb idea. What was I thinking!? I can't do this!*"". And that is the end of the loop. Back to beginning I go, and it starts all over again.

This little voice of doubt effects nearly all decisions I make. The end result is a stock pile of half-finished ideas. I can only get so far before this voice speaks up, I get scared and stop working on the idea. I'm too scared to succeed.

I now work just as hard trying to stop that doubt as I do on the actual product/idea. Honestly, the only reason I am working on my current project is because a lot of different people asked me about it after I mentioned it. The project was dead. I had shelved it because I was scared.

Every day I have to suppress that voice. I have to try to ignore it and just work through it. It's harder than you would think. I need to constantly remind myself that the Internet is full of haters that will always have something to say, and it will always be negative. They will always pick out the parts that I got wrong and will never offer constructive criticism about how the project may be improved.

My job is to ignore it and just go for it. This is my reminder.",2012-11-20 15:05:24.344407,2012-11-20 15:05:24.344407,,,f
64,Thinking Critically As A Developer,"A few days ago, [I listed 5 things](http://scottradcliff.com/post/what_defines_a_quality_developer) that I think make a quality developer. 5 things that a person can work on to become a craftsman. One of those things was thinking critically to compose efficient solutions. I should define what I mean.

Thinking critically is the ability to sit back and think about a problem in a broader sense. This is the exact opposite of just jumping in and programming something. Just jumping in will always result in something that you missed. Always.

Working in a way that permits a developer to *think* will lead to better solutions that have all of the elements that you would want; scaling, loose coupling, simple.

So, how does a programmer that doesn't use this method get there. I would say there are a few things that you can do.

* Sketch. Just drawing out how your system should work will often reveal holes in your plan and allow you to account for them.
* [UML](http://en.wikipedia.org/wiki/Unified_Modeling_Language). I know, I cringe a bit too. But I find this method really helpful in certain situations. Especially in designing pure OOP systems.
* TDD. This should probably have been first. Once you take a test driven approach, you can think about the solution in smaller pieces and then ensure that they work. When they don't work, you'll see that much sooner. Just like you might if you were sketching the system out on paper.

",2012-11-21 16:48:24.378048,2012-11-21 16:48:24.378048,,,f
65,Grateful,"Considering it's Thanksgiving, I sat for a minute and thought about what I am thankful for. I immediately thought about my current job and how much I complain about it. I complain about it a lot, way too much.

In fact, if I'm honest, being negative is a character flaw. It's definitely something I would like to work on. I have a ton to be grateful for, including my job, but there is so much more.

If you're a software developer in 2012, you have a lot to be grateful for. You hold a skill that in the most demand and has the brightest future. You get to make stuff that really impacts the world. You can build a business with just a little business knowledge. It's awesome when you really think about it. And it will only get better.

I am thankful that I had the foresight to go learn how to build software and in the process uncover some other skills that will definitely effect my future. I am thankful for a growing community of friends that help each other build businesses and grow an awesome community (Keep an eye on Toledo Ohio). I am thankful for an amazing family that supports me unconditionally.

Now that I am all thankful and stuff, it's time to build stuff and enjoy this while it's still awesome.

Be grateful. Build things. Be happy.",2012-11-23 04:39:06.354432,2012-11-23 04:41:45.253966,,,
66,Old Dudes Rock,"I'm not a 20 year old hacker. Actually, I never was. I spent the first part of my adult life working various labor jobs before ending up in construction. I worked as an IronWorker for 13 years before I finally made the jump to building stuff on the web. I was actually in my mid-thirties when I started with this web thing.

I was dead in the water by some standards. You know, the really smart people, investors. Most investors will tell you not to waste your time on anyone over the age of 25 or so.

Truth is, a person's thirties are about perfect. You can't possibly know enough until then. It doesn't matter what you know about how computer systems work. You don't know how *life* works yet.

## Being older doesn't mean you're washed up
I was reminded of this very fact while I was reading a piece about [The Anatomy of an Entrepreneur](http://www.kauffman.org/research-and-policy/the-anatomy-of-an-entrepreneur.aspx). It's full of great content, but one statement jumped out at me.

> Founders tended to be middle-aged—40 years old on average—when they started their first companies. Nearly 70 percent were married when they became entrepreneurs, and nearly 60 percent had at least one child, challenging the stereotype of the entrepreneurial workaholic with no time for a family.

That quote was under a heading about family background and motivation.

This kind of hits home for me. I'm 41 right now and surrounded by those younger than me. It's easy to believe all that I hear about building tech based businesses being a young man's game.

Every once in a while, us old dudes need to be reminded that we can still rock.
",2012-11-27 18:38:54.520951,2012-11-27 18:39:18.029916,,,
67,Changing Culture Where You Work,"I think about culture a lot. While I build up my [product business](http://10pixels.net), I still work for the man, and where I work suffers from some pretty bad business practices and an extremely toxic culture. I am not going sit and complain about the situation, I just want to touch on few things that can help the culture where you work.


## You can't change it in the middle
It should seem obvious, but you can't change culture from the middle, only from the top. It has to trickle down from whomever is running the show. That's how it became the way it is and that's the only path to change.

For example, let's say the culture where you are at is one of passing the blame to the next guy. You know, shit runs downhill type of thing. You can try as hard as you want to change the way fingers are pointed. You can try to start a culture of accountability. Sorry friend, it will not work. There is only one person in that whole company you can change.

## Start with something small
I'm sure you know who that person is. Yep. It's you. The only way I have found to change culture is by leading. You have to get off of your soapbox and change the way **you** work. You have to change the way **you** talk to your coworkers. You have to change the way **you** accept responsibility.

Small things make the difference. One thing that I do at work is  to ask instead of assign. When I know someone has more knowledge about a certain task, or I feel they could do a better job than I could, I ask them. *'John, could you help me out and email Joe? You're more knowledgeable about the business than I am.'* goes way further then *'This isn't my job. John deals with that. Have him do it'*. The latter is how things were when I got here. By changing the way **I** approach asking for help, I've started to see some changes, although, they are very small.

## Educating instead of dictating
One last thing. Try educating instead of dictating. We use Redmine for all of our issue tracking. The non-computer people hate it. They see it as a waste of their time, difficult to use, and something that they are forced to do. We still *force* them to use it, but we explain why. We explain that in order for a coworker 6 months or a year from now to understand what happened and what was done to fix it, we need issues and dialogue in Redmine. That the documentation that is left behind is extremely helpful, and that sometimes people move on and we want to help the next guy that might be supporting the software.

Similar to asking, this is starting to get somewhere. Coworkers are starting to see the benefit and are willing to give it a shot. They are willing to help because we help them understand why.

So, we *are* changing the culture. Not necessarily from the middle, but purely by example.",2012-11-28 21:30:06.92404,2012-11-28 21:30:06.92404,,,
70,Terminal Tabs And The Current Working Directory,"## Why do I need the CWD on the clipboard
I'm in the terminal all day. While in the terminal, I usually have several tabs open (testing, logging, etc.). Being the lazy developer that I am, I got tired of typing the path to the application several times a day. So I needed to store the cwd on the clipboard without using the mouse. Lazy, remember?

## Placing the CWD on the clipboard
Piping the current working directory on the clipboard is really simple.

    pwd | pbcopy

This places the current working directory on the clipboard so I can just paste it in and be in the app directory in seconds with the least amount of typing as possible.

",2012-12-03 20:49:06.9613,2012-12-03 20:49:40.130866,,,
68,Comments Are Documentation,"I love the [RubyRougues](http://rubyrogues.com/), and spent some time today catching up on some missed podcasts. There is a recent episode about [documenting code](http://rubyrogues.com/079-rr-documenting-code/) that I disagree with enough to warrant a post about my thoughts.

First, let me just say self-documenting code is a fallacy. It may be self-documented to *you*, but that doesn't mean that it is for someone else. Maybe the person reading you code is at a different level, or maybe they are new to your particular language. Whatever it is, there are way too many variables to assume that your code is so incredibly awesome that it speaks for itself.

## I'm Not talking about inline comments
Let me state that I am not talking about inline comments. When someone says that they hate comments and that comments are a code smell, I always picture larger documentation-like comments. I'm really not sure what comments they are talking about, but I put zero comments in the body of the method.

I do comment almost all of my methods. I include a minimum of three things.

1) What does this method do

2) What does it expect

3) What does it return

That's pretty much it. Some are longer with examples calls and returns; some are shorter with just the three items I listed. I use [TomDoc](http://tomdoc.org) as a guide. If you haven't read TomDoc, go read through it, there are some good tips for documenting code in there.

So, if you've made it this far, you may expect an example. Here is a small example from code I was working on this week.

    # Public
    # Creates associations with all line items passed to the order instance
    #
    # line_items = String of line_item ids separated by commas
    # Usage: @order.add_line_item_associations(""1234, 63273, 73636"")
    #
    # Returns nothing
    def add_line_item_associations(line_items)
      if line_items
        line_items_arr = line_items.split("","")
        line_items_arr.each {|item| update_line_item(item) }
      end
    end

The documentation tells the reader the things that I mentioned. It defines what it does, it tells what the input is. *This is important, because it can be confusing. The parameter name is line_items. That could be an array of line items, a hash of line items, or what it actually is, a string of line item ids.*  And it defines what it returns, in this case nothing. *Yea, I know Ruby always returns something*

Is this helpful to the next developer? Absolutely. Is it helpful to me? You betcha. Six months from now, when this code hasn't been looked at in a long time, I can see why I wrote this and what it's for.

Comments aren't evil when used correctly.

One last thing. Update your code? Update your docs.
",2012-11-30 16:15:42.743451,2012-11-30 16:19:29.875968,,,
69,Contributing To Open Source,"I start every year off with a few personal goals that I think will help me grow both professionally and personally. It's something that I was introduced to years ago and it just kind of stuck.

This year one of the goals I made was to contribute *something* to open source. Just make a pull request. Of course, this is way harder than one would think. Most of the projects that I use are giant projects. [Rails](http://guides.rubyonrails.org/) for example. Adding something to Rails scares the hell out of me. I mean really, I can't compare with [those guys](http://contributors.rubyonrails.org/). They are incredibly talented and know that source inside and out.

Naturally, I tried and failed to contribute something probably 6 or 7 times this year.


## 24 Pull Requests
Then I saw [24 Pull Requests](http://24pullrequests.com/) and I knew this was my chance if I were to complete the goal before time runs out. But again, I was frozen with fear.


A little background on 24 Pull Requests. 24 Pull Requests is awesome! Sign in with your [GitHub](https://github.com/) account, add some languages that you can work with, and your off. It will remind you to make a pull request everyday via email. Just help with one thing everyday. Oh yeah, not only will it remind you, but it will give you some projects that could use your help based on your selections and what is in your GitHub repo.

## Start Small
I really think the key to get started with anything is to start small. Sometimes *really* small. That's the route I took. After looking through issues on a few projects that I thought I could help with and noticed that I was in over my head, I opted for the documentation route and actually found a readme that could use a few links.

Yep, I added a couple of links. That's it. I'm not even sure if it will make it into a merge, but hey, I took a baby step. Something tells me that once I got something merged and I know I helped, even a little, I may grow some confidence to try something larger.

## Wait and See
Now I wait and see. Maybe 2013 will be the year I make that Rails Contributor list.",2012-12-03 01:57:06.520186,2012-12-03 01:57:06.520186,,,
84,Semi Launching And Motivation,"So I semi launched a thing yesterday. It's a landing page for a soon to be released product I am working on called [Velocity](http://velocityapp.net). It's a really cool tool for educators of all kinds to concentrate on creating an awesome learning environment in the simplest way possible. There's a [blog post](http://10pixels.net/post/introducing_velocity) on my company website describing how it works.

The thing that caught me off guard was the burst of motivation I received watching people visit the site, sign up, and share links. [Gauges](http://get.gaug.es/) is the perfect tool to watch traffic. Highly recommended.

As I sat there and watched the traffic, the feeling of fear starting to go away, and was replaced with this rush of adrenaline. I was already stoked about the app and the possibilities it has, but that rush made me want to work that much harder to get the whole thing out there.

Whatever you are working on, release it now. Don't wait, just release it and iterate. I deployed about 7 times yesterday as I noticed things I missed; a link here, better copy there, and so on. You won't catch everything before you deploy so you might as well deploy now and get to work.
",2013-03-21 15:27:24.425632,2013-03-21 15:30:00.151066,,,
145,Moving On,"For the last few years I have been working as a sole developer inside a company. It has it's perks. No one can tell me my code sucks. No one will argue with my technical decisions. But it also has it's bad side too. No one will tell me my code sucks. No one will argue with my technical decisions.

Working by yourself wears you down pretty quick. You lose something. You almost need someone to question you. That alone forces you outside of your comfort zone and helps you grow.

I have been passively looking for a new place for a few years. What I really wanted was other people to work with. People that shared my family values, desire to build awesome software, and the best work environment I could find.

I came close, but nothing felt quite right.

I have finally found that company.

I will be joining the team at [Whitelabel](http://wlabel.co).

These are some of the most talented people I have ever been around and I am excited and grateful for the opportunity to be a part of their team. I cannot wait to get started and see what we can build together.






",2014-08-05 01:11:24.129231,2014-08-05 01:24:25.062003,,,
71,My Interview Technique,"As a software developer, I am in a lucky group that is always in high demand. If I am unhappy for long enough, I can start looking around. Dipping my toes in the pool to see how warm the water is.

As it turns out, I'm not that happy. But looking for a new job sucks. I have to interview and usually perform some moronic programming test to see if I can do some oddball tasks that I will never see again during the course of my career.

## I try to eliminate myself from consideration
I've finally discovered my perfect interviewing technique. I try to eliminate myself from consideration. Sounds crazy, but hear me out.

I want to know as early as possible if a company is not a good fit for me. What if I know I won't be happy there? I need to find out quickly.

In the interview instead of telling the interviewer what I think they want to hear, I lay it all out there. I hate working in a CMS, I only want to solve problems that matter. I dislike offices and prefer to work remotely. I think integration tests are overused. I'm not 25 or even close. These are a few of things I've been throwing out there, and it seems to work well. I'm not wasting my time with interviews when I no longer fit what they are looking for, or they don't fit with what I am looking for.


## A new approach
When I approach interviews about what I want out of an employer, or how I may not fit with what they are looking for, I always feel like the interview went well. I have either discovered that  the company is not for me, or that I am exactly the type of person that they are looking for.

Time will tell if I am crazy or not.
",2012-12-14 15:51:59.907938,2012-12-14 15:53:14.995392,,,
73,This Feels Too Much Like Work,"Sometimes you have to just stop doing something that isn't fun. Even if it's an app that you really think is a good idea. If you are not having fun building it, you won't have fun maintaining it. Don't be afraid to shelve something that you aren't into.

I have this app that I have been working on that helps manage courses of any kind. And it's a great idea, but it's not fun. I'm not having fun building this thing, and I'm starting to picture what it would be like if people actually paid for it and I had to support it. That picture isn't pretty and looks an awful lot like work.

Here's the thing. It was fun when I was teaching courses, but I'm not teaching anymore. I won't be able to eat my own dog food. I won't know what features to add because I won't have any first hand experience in what it's lacking. So, I think it's time to move on to something else.

It sucks moving on to something else. I told everyone I was building this thing and most thought it was a great idea. But if you are building something, you have to build it for yourself. I only want to build things that are worthwhile for me, and it's cool if some people like it and pay for it, but if not, I still have a valuable to for me.

Maybe if I start teaching again it will make sense to build a tool to make it easier on me, but until then it goes on the shelf.

Don't be afraid to kill something that feels like work.",2013-01-03 00:59:04.024787,2013-01-03 01:01:54.666924,,,
74,Managed Systems And Software Engineering,"Software engineering with today's tools is all about plugging systems together. You have to be skilled enough to know what tools to use to build your product. Call it cloud computing if you want, it's just the way software is built today.

I come from the school where the software developer built **everything**. He wrote the code (usually from scratch), configured the server and all of the components in it, handled the database details (installation, securing, etc..), and maintained all of it. That is just how it was done.

Naturally, considering how I learned to build web apps, I pushed back against managed systems. I thought [Heroku](http://www.heroku.com/) was cool, but why  would I pay for something that a *real* software developer should be able to do. Things like [MongoHQ](http://tour.mongohq.com/Mongo?k=Mongohq&gclid=CJzVs777zLQCFYw-MgodRl4AhA) are cool too, but seriously, pay for database hosting? That's for amateurs!

I have finally realized that these pluggable components are popular for a reason. I spend about 70% of my time on the job working with server issues. Issues I shouldn't have to deal with. This is time that should be spent building software. If I had that 70% back, I could have improved the software that I am supposed to maintain. I could have wrote new software for new business.

Maintaining servers is not worth the effort if you want to build stuff.",2013-01-04 14:33:33.745591,2013-01-04 14:33:33.745591,,,
72,Twitter Has Become Predictable And Boring,"Your political and religious views are boring to me. Sadly, that's mostly what Twitter is now. When I check in to Twitter to see what some of the people I admire are up to, I get a bunch of gun control, aetheist, and generally negative crap.

Rarely do I find someone posting about what they are working on, or what they have learned lately. Those positive things are the gems of Twitter. It's getting really old. 

Surprise, no one cares what you think about religion, politics, or any other boring topic. 

Maybe it's just the people I follow, but I doubt it. I get the feeling that Twitter is full of people not just voicing their opinions, which is fine with me, but carrying on when others don't agree. 

Is there a better platform that is positive? There has to be something that I can check into a few times a day and see something that is actually interesting. 
",2012-12-16 04:17:04.775553,2013-01-09 13:52:59.657743,,,
85,Go Make Something,"As Seth Godin puts it:

>>  If you get more news, faster, via Twitter, say, you're not going to have a significant advantage over someone who has *just enough* news. Understanding what every single person is saying about everything, all the time, leaves you little opportunity to actually make something.

Perfect and true. Set a *data constriant* and build something.

source: <http://sethgodin.typepad.com/seths_blog/2013/03/sometimes-more-is-not-what-you-want.html>",2013-03-22 12:59:48.656321,2013-03-22 12:59:48.656321,,,
86,Removing User Registration In Devise,"I prefer [Devise](https://github.com/plataformatec/devise) for authentication in my Rails apps. While working on [Velocity](http://velocityapp.net), I needed to remove sign ups. Foolishly, I tried some redirects and custom routes with no luck. The work is all done in the model. Remove `:registerable` and you're all set.",2013-03-22 20:25:17.562751,2013-03-22 20:26:18.963211,,,
75,If It Is Not Deployed It Does Not Count,"A lot has been, and will be, said about practicing the craft of programming. I buy into a lot of it. It is important to sharpen your skills. It is important to get better through repetition. But it's not enough. You aren't finishing anything. You are just writing code.

Maybe your job is just writing code. Mine is a little different. It involves finishing the process. Designing the system, writing the code, and deploying it for people to use. Writing code is a very small part of it. The most important part, shipping what I have written, isn't mentioned with practicing.

I think if you don't finish, you haven't really accomplished anything. I have directories full of *practice* to prove it. I didn't finish any of them.

I know why I don't finish. It's that one negative comment. I can remember writing a RSS feed aggregator once, just for practice. [Node](http://nodejs.com) was kinda new and I had heard about [Express js](http://expressjs.com) and wanted to play. I had every intention of deploying what I was writing. But one negative comment and I felt stupid and shelved it.

So here it is. Instead of writing a kata or fumbling around a language you will never use. Just build something for practice. But you have to finish. If it's not deployed, it doesn't count.

It doesn't matter what it is or what anyone says. it can be a word processor (I know it's been done) a feed reader (I know it's been done) GTD (Yep, that too). Just ship something, even if it sucks. That is how we should practice.
",2013-01-08 22:02:56.896248,2013-01-08 22:02:56.896248,,,
76,Staying The Course Is The Hard Part,"I recently discovered a podcast series by Seth Godin called [Startup School](https://itunes.apple.com/us/podcast/seth-godins-startup-school/id566985370). It's a class that was taught over a few days with people just bootstrapping their products/companies. It's only a handful of podcasts that are really just live recordings of the class, but the audio isn't too bad. It's worth checking out.

I've read books/blogs and listened to many podcasts about startups and building products. There is one thing that Seth said that I hadn't heard before and has stuck with me ever since I heard it. *I'm paraphrasing, I don't recall his exact words*. The hardest thing for an entrepreneur to do is stay the course. Ideas are easy. Starting them is easy. Planning the product is easy. But staying the course is difficult.

All too often I just stop. I don't know, maybe I get cold feet, or maybe I talk myself into thinking that what I am building will never work. But I never stay the course to see.

Without a doubt, staying the course *is* the hardest part. Embarrassingly enough, I just wrote a [blog post](http://scottradcliff.com/post/this_feels_too_much_like_work) a few days ago where I jumped ship. Looks like it's time to climb back on board.",2013-01-09 14:07:38.861163,2013-01-09 14:07:38.861163,,,
78,Just Let Pixar Handle Movies From Now On,"In 1994, my favorite comedy of all time was released in theaters. I loved Dumb and Dumber. I laughed non-stop. I know it was stupid, but that was the genius. It was so stupid it was funny. I'll bet I laughed at the same gags the first 10 times I watched it. An instant classic.

Fast forward to 2013. Someone on Facebook posts a link to the sequel. Not just a knockoff with different actors, but an actual sequel with Jim Carrey and Jeff Daniels. It's doomed. The  classic will be tarnished forever. There is no way they can capture what they did in the first one. Both of these actors haven't made a decent movie in years!

I say it's time we only let Pixar and Quentin Tarantino make movies. They are clearly the only people left with a creative bone in their body. No remakes (unless it's completely reimagined), very few sequels (the ones that are done, are done well. Toy Story actually got better with each sequel), and they aren't releasing movies just to make a buck.

'Dumb and Dumber to' will be a train wreck. Somebody stop the Farrelly Brothers before it's too late.",2013-01-15 19:03:05.873693,2013-01-15 19:03:05.873693,,,
77,Test Files Should Be Small Too,"Stop me if you've heard this one. Your model class is relatively small. Maybe not *small*, but definitely manageable. On the other hand, your unit test file is out of control. Tests everywhere! It's approaching 100 lines, if not more, and it's often hard to get through that file or read the *documentation* that everyone tells you is in there.

I have that problem too. If you think about it, your test file probably has 3-4 times the code that your model does. Each unit being tested needs a [happy path](http://xunitpatterns.com/happy%20path.html), a sad path, and probably some [edge cases](http://en.wikipedia.org/wiki/Edge_case).

If you're using [Rails](http://rubyonrails.org/), you might accept the defaults. With the defaults, a model gets 1 file named {model_name}_test.rb (*ex. for a user model it would be user_test.rb*). Also, if you are new to Rails, you may just accept that as the place where those unit tests go, even though they are a mess.

The truth is you can split that file up just like any other. Testing a specific portion of your model, or some specific logic? Create a new file under `test/`. I keep mine in `test/unit`, but name it something a little different; like `contractor_status_promotion_test.rb`. Now I know the logic for the contractor status promotion lives in here and it's **much** easier to read. Just make sure it ends in `_test`.

Try breaking up those monster unit test files into something a little more user friendly.",2013-01-14 17:57:24.500159,2013-01-14 18:00:51.778035,,,
79,I'm Not Your It Guy,"I like to relate the IT field to the medical field. Not in knowledge, but rather, in ignorance. You see, it's common for a person to assume because a person is a doctor, they can do anything related to illness or the human body. I mean after all, they are a doctor. Think about how awful our doctors would be if they had to do everything that relates to medicine. I want my doctors specialized.

IT is the same way. Because I use a computer to build things, most people assume I can do *anything* with a computer. Build them, repair them, diagnose them, etc… Nothing is further from the truth. Just as a doctor has knowledge about many different areas of medicine, that does not mean he's qualified to practice them all. And I am not qualified for everything that a computer does.

I build software. I maintain the servers the serve that software because that's part of my job. Notice I didn't say anything about desktop support, printers, wifi, hardware, or data recovery? Because it's not my job. Yes, I *can* do most of those things, but I am no where near qualified.

Please do me and every other person that works with computers for a living a favor and educate yourself. Thank you.

[Software Developer](http://en.wikipedia.org/wiki/Software_developer)

[Network Engineer](http://en.wikipedia.org/wiki/Network_engineer)

[Technical Support](http://en.wikipedia.org/wiki/Technical_support)

Hint: I am the first one.
",2013-01-16 20:00:28.710873,2013-01-16 20:00:28.710873,,,
80,Performance Is King,"When all the dust settles, and all the requirements are met, and your shiny new
app with the amazing aesthetic design is deployed. The only thing that matters
is performance. No one will care how great it looks if they are stuck staring at
it while it loads. As a matter of fact, if they are like me, they will just open
another tab and forget about for app altogether.

Before you make it pretty, make it fast!  ",2013-02-06 21:39:02.192461,2013-02-06 21:39:02.192461,,,
91,Changing Habits,"I've been thinking about over consumption a lot lately. I do think it's a *thing*. Not sure if it's an addiction, but it definitely can grab hold of a person and effect their productivity, attitude, and overall mood.

The problem for me is that I am not a big believer in fads or whatever happens to be the latest thing, so I avoided the [Information Diet](http://www.informationdiet.com/) as much as I could. But it really is helpful, if used properly for your habits.

I see it more as changing habits versus avoiding information outlets. Because the truth is, those outlets; like Hacker News, Twitter, or Reddit have great content and help me learn new things. Expanding my knowledge is a central point of my life and I love learning.

Here is what I have started *trying*. Notice I said trying. This is harder than it looks.

I schedule as much of my information reading as I can. A 1/2 hour to an hour before I actually start work, then about a 1/2 hour after lunch. This forces me to focus on the important things. I often look around when I'm taking a break from programming and without Twitter and the like I don't know what to do. This is the difficult part. I try to keep a list of tools, programming practices, topics, etc… I would like to try, and use that spare time to for those.

I also put my phone up when I am at home. I know! Crazy!

I place it on my dresser while I am in the other room. Now I can't look at those time suck activities and I am forced to actually do something else, like watch a movie with my family, play guitar, or walk outside.

I do slip a lot. I have days where I find myself checking Twitter over and over. Or RSS feeds over and over. But all in all, it's been a nice change and I'm certainly happier and more productive when I schedule effectively.",2013-04-15 15:51:10.163204,2013-04-15 15:51:10.163204,,,
92,Rails Rescue Projects,"[Everyday Rails](http://everydayrails.com/2013/04/16/rails-rescue-2-testing.html) has a great series of posts on a Rails rescue project. Definitely recommended. Part 2 talks about testing.

> While the previous developer did have some tests in place, I quickly lost faith in them: On first run I got a number of deprecation warnings, then 60 percent of the provided tests failed.

I see this too, but it's important to note that blaming the developer is never the right move. There are so many variables that you are unaware of. Blame the code, not the developer.


> I began writing request specs (now known as feature specs in Capybara 2.0 and onward). I started with something basic: What happens when a user logs in?

That's pretty much how I approach untested applications. Start from the outside and see what happens. I'm looking to see what  setup is required, what files are touched, and the responses are.

Also, I'm not sure I would completely wipe the spec directory. It's probably the right thing to do, but I would prefer to keep *something* there while I build out the other tests, and then remove the old tests.",2013-04-16 17:24:46.548337,2013-04-16 17:24:46.548337,,,
93,Small Business Vs Startups,"I have been reading about startups a lot. And I like startups. There are some really cool companies that rise from them.

What bothers me is that the term *startup* is used incorrectly 80% of the time. The other 20% of the time, the word is used correctly, but most people confuse it's meaning.

The ones that confuse the word tend to think startup means *business*. It does not. It can't. The majority of them don't even make money.

Think of the word business for a minute. Better yet, think of the phrase ""Going into business"". I don't know about you, but to me that means ""Go make money for myself"".

How about this one ""*I'm in the software business*"". What does this one say to you? To me it says ""*I sell software*"". I may build it and sell it, or I may just sell the software straight up. The key is I render goods and services for money.

## Businesses Make Money
At the end of day, that is all there is. A business makes money. Sometimes it's a profit, and sometimes it's not. But if it's not, the business won't be around long.

So how does a business make money? It's simple; they need to have something that someone wants and will give them money for. In order for someone to hand over money, it has to solve a problem. A real problem. Not something that you think some person may like, and you sure can't just give it away.

The second thing that defines a business is growth. I know not every business wants to be huge, but they have to grow some. All businesses start out small and in order to stay in business, they have to grow, even just a little. That's the growth I am talking about. There has to be a target, even if that target moves from time to time.

## Startups: Looking for Cash
The problem that I have with startups and how some people view them is that they don't have any money, and they aren't making any. I want to puke every time I hear the term *startup mode*. What a complete crock. There is no startup mode. Better yet, startup mode is a made up term to get people to work harder for less.

The ones pushing people in startup mode have no idea if what they are doing is going to work, but they expect those people to work their asses off to find out for them. These are not businesses, they are simply expensive experiments.

## Getting Acquired
This is the worst. There are a few winners here. Here are some of the people that are not the winners: the ones busting their asses in *startup mode*, and the customers. These are the two most important segments, and the one's thrown into the fire when some startup guy finally figures out how to make money. By selling the whole thing and getting rich. This is a major issue.

A real business is not going to jeopardize their customers. That's their money. Their most valuable asset. They have worked hard to gain trust and they will do anything they can to keep their customers. Think about how many times Google has denied the Government's request for their customers information. That is what a business does.

## Lost Trust
When an acquisition happens, the startup gets swallowed up by a business and with it goes a lot of trust. The early customers that thought the business would eventually make money and live on for years have been used as leverage and some dude is laughing all the way to the bank.

More than likely this was the plan all along. Actually, some people in the startup community preach this. Build something, get purchased, and bask in the glory of your money pit.

For some startups, it's all about getting rich as fast they can by selling what they were able to either create or talk other people into creating.



",2013-05-20 17:07:24.366877,2013-05-20 17:07:24.366877,,,
94,Rails Engines And Migrations,"Getting migrations to run when setting up your Rails engine can be a bit
tricky. If you generate some sort of migration either via a scaffold or model,
and run `rake db:migrate`, you will see no output. There is nothing telling you
if you failed or you succeeded.

What you need to do is cd into your dummy app `cd test/dummy` and copy the
migrations over to the app, and then run them with `rake
<engine_name>:install:migrations`.

This is on Ruby 2.0 and Rails 4.0.0.rc.

",2013-05-25 17:34:40.650056,2013-05-25 17:34:40.650056,,,
97,Build All The Things,"I am starting to think that if I have the ability to build the services I use, I owe it to myself to do that.

Services are dying all around me. They get purchased, killed, or are at risk of getting purchased or killed.

The way I see it. The only way to have awesome online services that I know are going to be there is to build them myself.

I know it's a lot of work, but seems like a good experiment and I have a pretty good [umbrella](http://10pixels.net) to build them under.",2013-06-21 18:08:07.290521,2013-06-21 18:08:07.290521,,,
95,Auto Starting Nginx With Rvm And Passenger,"If there is one thing that drives me nuts, it's trying to figure out what isn't running after a server reboot. I wish I had all the time back from grepping through history to see what services were started manually.

The problem with installing nginx through passenger and rvm is it doesn't behave like a normal install. The usual startup script doesn't work.

This script works pretty good for me, so I thought I would share it here. There is also a [GitHub repo](https://github.com/ScottRadcliff/nginx-passenger-autostart) with instructions. This is all thanks to [http://serverfault.com/a/69753](http://serverfault.com/a/69753)

1) Create shell script in /etc/init.d

    sudo vim /etc/init.d/nginx-passenger.sh

2) Paste in this text:

    #!/bin/bash
    # this script starts the nginx process attached to passenger
    sudo /opt/nginx/sbin/nginx

3) Make it executable

    sudo chmod +x /etc/init.d/nginx-passenger.sh

4) Run it to make sure it works

5) Update the init script links
    sudo update-rc.d nginx-passenger.sh defaults",2013-06-12 13:02:06.595316,2013-06-12 13:05:35.266309,,,
96,Machine Head,"I don't know how I never got into [Machine Head](http://www.machinehead1.com/) before, but these  guys are awesome. A great metal band. If there is one thing that makes subscription services like Spotify worth it for consumers and artists, it's that once I get into a band, I can listen to all of their stuff. If it's awesome, I'll buy it.

Before Spotify this would have never happened.

If you like metal, check out Machine Head's [Unto the Locusts](http://open.spotify.com/user/scottradcliff/playlist/5xhzmPacEsdee7CQymvTEG)",2013-06-20 15:20:41.060802,2013-06-20 15:20:41.060802,,,
98,School Is Not Enough,"Recently,  I had to do one of the more difficult things I've done in a while. I had to participate in laying someone off. I mean it wasn't terrible, and the programmer knew that he was working under a trial period. But I still *felt* terrible, and that got me thinking about what went wrong.

This is my letter to any new programmer trying to crack into software development.

## School is not enough
I get the feeling that many new programmers think that they can enroll in school, go to class, do the assignments, and that's it. Nothing could be further from the truth. In fact, if that's the path you've chosen, the guy building meaningless web apps just to see if he can has already beaten you. He has learned more than you, and has more experience than you. You have got to love programming! There is no other way. You have to love building things. If you have zero side projects, you don't love it enough and you will fail.

You need to find out if this is for you quick. Because trust me, if you don't like building things and working through the issues that come up from building things and making them work when they don't seem to want to, you are going to hate working. Jump in now. Spend some free time seeing what's possible. Here are a few  ideas to get you going:

1) Build something that has already been built. Sounds stupid, doesn't it? You will learn more building something from the ground up, than you did studying how fast an algorithm is.

Make it simple. Start with a static site generator. Can you build something that just takes text and builds a working HTML site? Make sure you deploy it.

2) Buy some server space and build a site on it. But don't just grab some off the shelf blogging platform. Build your own blogging platform. Get used to fixing problems to make your life easier.

3) Look at something you have not done yet. Then do it. When I was starting out, I would look at what I haven't done yet, but thought was cool. Then I programmed it. You will be amazed at how fast you progress with knowledge and experience.

One last thing. No one will know about any of this if you don't tell or show them. It's scary as hell, but do it anyway.

## Talk to Other Developers
If you just sit in your house and fiddle around, you won't get anywhere. You need to talk to someone with more experience than you to help you learn. Asking questions is a big plus. That's how you will level up. Don't know what questions to ask, or who to ask? That's okay, find a [meetup](http://www.meetup.com/DevToledo/), go to it and listen. You might even want to introduce yourself. Tell them who you are, what you're working on, and ask them what they are working on. Pro tip: software developers love to talk about what they are working on or interested in.

Once you've been doing this for a while, you will start to see patterns of growth and experience. Not to mention, make some pretty cool friends. There are some of us that hang out in Toledo. If you're local enough, come [hang out](https://www.seedcoworking.com/)
",2013-06-24 16:04:44.225242,2013-06-24 16:04:44.225242,,,
99,Google Reader Apocalypse,"[Jamie Zawinksi](http://www.jwz.org/about.html) has absolutely [nailed my experience](http://www.jwz.org/blog/2013/06/google-reader-apocalypse-extremely-fucking-nigh/) with the Google Reader apocalypse. Except for the fact that I'm okay with reading my feeds in a browser. In fact, aside from my iPhone, I prefer it.

Feedly sucks. It's difficult to use, inconsistent, and ugly. I know some people think it's *pretty*, but it's not. This is not moving the RSS platform forward. It's just keeping it level. It's the same thing. No, scratch that, it's worse. I liked Google Reader better.

That small rant about how awful Feedly is, is nothing compared to Jamie. I laughed the whole way through reading the [article](http://www.jwz.org/blog/2013/06/google-reader-apocalypse-extremely-fucking-nigh/). It's worth five minutes. You'll probably need readability or something similar. The site is hard on the eyes. ",2013-06-25 15:45:25.113512,2013-06-25 15:46:26.07709,,,
100,Learning Html In Isolation,"I can remember when I first starting learning how to build things on the web. It all looked so large and complicated. There was a steep learning curve for something as simple as putting text on the screen. I can recall simple syntax errors in HTML that I had written that took me hours to figure out.

The fact is, coming to website building without any prior experience is daunting. That's easy to forget. HTML seems like programming to someone new, even though it's not, and after some time everyone realizes that it's not. But at first, it seems like you are doing something really complicated, and even a little magical.

## Why Isolation is Important

There are a lot of resources today for learning how to build things on the web, and many of them are awesome resources by very talented people. But something is missing. They often group different things together. HTML and CSS, Rails and Ruby, even HTML, CSS, and JavaScript. This is a mistake.

These things should be taught in isolation. When they are grouped, they are naturally just skimmed. Many intricate details of these technologies are sacrificed for time. There just isn't time to teach multiple technologies at once, regardless of how close they are related.

Instead, a deep dive into these technologies is the better route. Sure, it takes longer. But it produces a more knowledgeable person that is able to take each technology and build them on top of one another.

## Beyond Basics.

Anyone can build things on the web with a very basic understanding of HTML. They don't need to know about all of the advanced features of the language. All they really need to know is paragraphs, headings, images, and links. You can build something with just that knowledge. But you will be stuck building something very basic, and if you are like me, you will be left with a feeling that there has to be more to this web stuff.

There is, and it takes time.

## Small Steps. Deeper Understanding.

When I taught courses at a college level, I saw students struggle to grasp multiple things at once. HTML was always taught with CSS, and sometimes a little JavaScript. The success rate of this format is about 10%. The other 90% leave that course confused. They get stuck. ""What was the HTML part again?"" ""Where do the curly braces go?""

What colleges think is being efficient, is actually being confusing and counter productive.

If I were to begin designing and teaching courses again, I would start with HTML, nothing else. Really dig in. Understand all the elements. Grouping, text-level, embedded, tables, forms, etc...

Once those are understood independently, I would jump to CSS and completely understand how elements are styled, accessed, and manipulated. Understand why we use CSS, how we use CSS, what the most powerful features are, and when you can take it too far.

With a deep understanding of HTML, CSS becomes easier. There are no longer questions about what something means on the HTML side. You are only concerned with CSS at that point.

The third layer would be scripting. This shouldn't even be attempted until you understand why, where, and how you would use scripting. It's pointless if you don't understand the foundation.

This is how we should be teaching these technologies. One manageable piece at a time.
",2013-08-06 20:39:45.668979,2013-08-06 20:39:45.668979,,,
101,Extracting Business Value From Features,"Software is based on features. It really boils down to a series of tasks to complete. The faster your software can allow a user to complete the task they are set out to do, the more enjoyable it is for the user and the happier they are to pay you.

Think about the software that you love. Think about your go to app in a crowded market. That market could be todo apps, project management apps, or maybe even word processors. The one app that you use without thinking is the one that makes you the happiest.

Now think about the software that you tried and hated. It was difficult to use, finding what you were looking for is clumsy and never quite works as you expect it to. It took too many action to complete a task. It probably even has features that you don't use or even understand how to use.

Bad software is the result of a poor feature set. If those features aren't solving a problem that you are having, they are just taking up screen real estate. And more often than not, getting in your way because you don't care about them. They hold no value to you.

## Understanding Features

The importance of being able to understand features cannot be overstated. Extracting business value from features is the key to building something worthwhile. It's easy to get bogged down with wants versus needs. A feature that ends up in the want column is one that is cosmetic. It might start out like this ""Hey, wouldn't it be cool if we could..."". Beware. This isn't solving anything and it will get in the way.

Features must demonstrate business value.

Question everything.

## Feature Specification

This is why story driven development is so effective. Instead of looking at features as something you think a user should be able to do, you are looking at *why* a user is using a particular feature.

The basic format for a story is:

    As a [user]
    I want [perform some task]
    So I can [receive some value]

Now the conversation turns to why. Why is the user looking to complete this task? You are defining what value is being gained from a certain task. If your feature doesn't fit in this format, it's more than likely a want.

For example, say you want to add comments to your application. You think this is something your users want and it provides a definite value. You might write that as this.

    As a customer
    I want to comment on entires
    So I can contribute to the community

Now everyone on the team knows why they are building comments. Comments provide a community aspect that keeps users coming back to contribute. This is definitely valuable. Not only to the users of the application, but also to the product owner.

This also sparks a conversation. How should these comments be structured? Can a user reply to a certain comment or person? A lot of applications allow users to reply inline with another comment. Is that valuable? Why? Does the user get the same value without the inline comments?

You should see a pattern here. This is clear communication. These are words everyone understands. No programming logic or color theory. Only expected outcomes. The result is always a more solid feature with high value for users and product owners.


## Solve the real problem

For every feature, there is a deeper problem to be solved. The feature is actually exposing the problem, you just have to see through what's on the outside to get to the core.

You can't go wrong with valuing communication over everything else. Ask questions, debate purpose, and solve problems at the core.

## Not Just for Teams

I often work by myself. Just an editor, an idea, and me. This method of extracting business value still works. Even for apps that are just for play.

It still forces me to build things that matter. Not to mention it's always good practice to [play how you work](http://37signals.com/svn/posts/3504-you-play-like-you-practice).
   ",2013-08-14 17:34:44.750393,2013-08-14 17:34:44.750393,,,
103,Can I Delete My Rails Migrations,"As I was working today, I had a thought. Why do I need all of those database migrations? I don't use them. When I fire up a new environment, it's much easier to run `rake db:schema:load`. And the migrations are redundant. All of that data is in the schema file.

I can't recall digging through migrations when I need to see the attributes of a model or what datatype it accepts. I always reach for the schema file. Once I've migrated successfully, I don't need the migration file anymore. It's a means to an end.


## There is No Compelling Reason to Keep Migrations
The most obvious reason to remove your migrations is that they are redundant. They are in your schema file, in your `db/migrations` directory, and you can get them from version control if needed. I would argue that they may confuse developers in certain situations and not provide documentation as some have claimed.

Let's say you create a product model. Then, three months later you add a few fields to that product model. Simple, create a migration to add the new fields. Now you have the product fields in two different migrations with other migrations in between. This is a point of frustration for the new developer. If you've never been the new developer, trust me on this. I would rather remove those migrations and force new developers to use the schema to see how the product table is built.

### The Migrations Directory Doesn't Get Smaller, Only Larger
Your migrations, which maybe just a few files now, will grow to an enormous size with time. If whatever application you're working on is around for a few years, you will start to fear that migrations directory. It's kinda like the tests that you inherit that you are afraid to touch because they are scary. If you have never inherited tests, I'm jealous.

### New Environments are Easier with schema:load
When you fire up a new environment, using `rake db:schema:load` is easier. It just takes that schema file and loads it up in the appropriate database. I migrated a very old application with over a hundred migrations *once*. I spent the next couple of hours commenting out code here, uncommenting code there, just to get it to a working state. There are more points of failure then you realize. Schema load takes seconds and it's done.

## Although, I Would Keep Some
Even with all that negative stuff about why you don't need them, I would keep some. I think 5-10 should do it. Sometimes I need to roll back and fix a migration rather then create a new one. I wouldn't go much past 5.

Recent migrations can be helpful if you forgot something and would like to rollback, edit a migration, and rerun them. Again, more than 5 is more work then it's worth.

## Yes you can delete migrations.
I haven't found migrations helpful to keep around, or helpful when I come onto a new project. For me, I can just remove them and not worry about the past. ",2013-10-31 15:02:52.081044,2013-10-31 15:03:37.562796,,,
102,Never Too Old,"Anyone that knows me knows that I am a little sensitive about my age. Not
really about getting older, but more about my profession. I see clear lines of
ageism in technology and I fear that I am quickly approaching obsolescence.

I think about it a lot. I question just about everything I do, wondering if it's
the *right* move. Worrying that I should be concentrating on something more
important so I don't fall behind current trends. When I should really just enjoy where I am and have fun
building stuff.

I was reading through [Quora](http://quora.com) today and stumbled upon
something that I found interesting. There was a question about [what people in
Silicon Valley due when they hit 35](http://www.quora.com/Silicon-Valley/What-do-people-in-Silicon-Valley-plan-to-do-once-they-hit-35-and-are-officially-over-the-hill). You know, when they are *over the hill*.

The first answer that caught my eye was from Steven Grimm.

> When I was 35 I started working at Facebook. The only hill I went over that year was when I drove to Santa Cruz to visit some college friends.

> Some of the best programmers I know are over 40. The software police don't show up at midnight on your birthday and confiscate your license to code.

I thought it was kinda funny, so I followed the question so I could see what
other people had to say.

The next answer that caught my eye was from Michael Arrington.

> I started TechCrunch when I was 35.

Then Craig Newmark.

> Well, I started craigslist when I was 42...


And finally Paul Bragiel.

> I started to train for the Olympics.  :)

That's when I knew I had to save this. I will need this the next time I think I
am too old.

*Update*

Then Reed Hastings.

> Well, started Netflix DVD rental when I was 37...and first streaming when I was 47...so maybe not too bad after 35 except that all-nighters are definitely harder.",2013-09-18 19:20:45.482167,2013-09-19 15:59:28.524362,,,
104,How To Use Programming Advise,"I've never been one to blindly follow what someone says I *should* do. I'm more of the *try it and see what happens* kind of guy. I can see where it's tempting to base your decisions based on what someone says worked for them, especially when you are new to something.

This is really the case for new developers, either to a language/framework, or just programming in general. It's easy to just ask someone what to do and do what they tell you. New people want to do the right thing and the easiest thing is to do is copy what more experienced programmers do.

This is wrong and leads to a practice that has good intentions but results in poor understanding and groups of people that are learning less than they should be.

## It Doesn't Matter What Someone Thinks You Should Do
Really, it doesn't matter what someone else says. Sure, they may be more experienced and developed a plan that works for them, but that doesn't mean it will work for you.

I recall this story and I am not sure where I saw or heard it.

A little girl asks her Mom why she trims the ends of a roast before cooking it. *I don't know what the little girl's name is, let's go with Sally*. Sally's Mom can't answer her, but recalls learning it from her Mother. So, Sally heads to her Grandmother and asks her the same question. Again, the Grandmother can't answer the question and informs Sally that she learned it from *her* Mother. Finally, the little girl gets to her Great-Grandmother and asks her. After asking her third person, Sally gets her answer; her Great-Grandmother would trim the sides of the roast because she didn't have a pan big enough to fit the roast into and no one bothered to question why. They just copied the person before them.

For years, these women blindly cut the ends off of every roast they made. All because that is how they learned.

The same thing applies to programming. Maybe the person you are asking learned it from his mentor and has no clue why his does it that way, he just does. Be curious and question everything.

## Base Your Decisions on Experience
Programming is a practice of asking questions. The most important question being *why*. This is why we are programmers. This quest to understand how something works and what's possible is how the most powerful software is built.

It stands to reason that the same thing should be true about the decisions you make.

All decisions you make should be based on things you have tried personally. Whenever you wonder if there is a better way, just try it. Find what works for you.

## Take Pieces from The Advise You Receive
It would be stupid to ignore the advise of someone more experienced. They have been in your shoes, felt your pain, and found a solution. But it's *their* solution. It's what works for them.

Listen to the advise, try it out, but in the end, only use the pieces that make sense for you.

",2013-11-01 20:05:33.276555,2013-11-01 20:05:33.276555,,,
105,Testing The Right Things,"I've been thinking about the next level of TDD for a while. The current (most common) model of TDD doesn't really work as well as it used to. Rather than thinking about how the application should function, I prefer to think about how the application should function *and* how those functions should be built.

I prefer to sit and think about the architecture. I ask myself questions that actually drive out the design. I think about what objects I will use and what messages they will send. Are the methods private or public? Does this data need to persist? What are my edge cases and how will I handle them? All of these questions guide my tests. These are my test cases.

## The Just Test Everything Approach
Today's model of TDD promotes just diving in once you know how something should behave. Start everything with a failing test. Literally, everything. Even loading the index page.

It's easy to test for everything, but is it a waste of time?

TDD is awesome, but I feel it drives many away from just sitting and thinking. Rich Hickey is really onto something with [Hammock Driven Development](http://youtu.be/f84n5oFoZBc)

## The Key is Unit Testing
Lately, I have been trying to strictly unit test everything. If I am using a framework, testing routing or page loads seems inefficient. It's already been tested by the framework and by people smarter than me. I try to move everything I am testing to logic that I introduce. This really leads to a more modular application with lots if classes that I have defined. My controllers are cleaner and so are my tests.

By building classes for everything, I am have the opportunity to really think about how the parts interact with the system.

## Listen To Your Tests, But Think About Them First
Don't let TDD tell you what code you should writing, but instead, you should already know what code to write; TDD should drive functionality. I like to know what I am building before I am building it. The model of TDD that newbs follow promotes having failing tests tell you what to do. Maybe this is the wrong thing to tell them. I think it's better to have newbies think about the solution they have come up with and test that.

Think about how dangerous it is for someone new to programming or a language to start programming something without knowing what they are programming.

Think, design, and then test.",2013-12-09 13:53:10.899236,2013-12-09 13:53:10.899236,,,
106,The 29 Dollar Programmer,"I'm not sure how I feel about this whole train everyone to program movement. I do think that everyone that *wants* to learn how to program, should be able to. But wanting to learn how to program and wanting to program for money are not the same thing.

I recently saw something titled *Learn how to program for $29*

Really? $29? What can you possibly learn for $29? Better yet, how much do you enjoy programming if it's only worth $29?

That screams *I heard programmers make a lot of money. I want t make a lot of money*.


## We aren't spending enough time teaching new programmers

I taught a few classes for a few years and I would not even consider teaching someone any sort of programming for $29. The amount of stuff I would have to skip is alarming. I suppose I would just have to teach them how to do some task directly. Like _this is how you validate an email address_ or _this is how you search and replace text_.

I would rather approach it from logical thinking perspective. Teach them how to reason and think through problems, construct a solution, and then figure out how to program it.

We are not actually giving them tools, we are enabling them by  allowing them to think that this is easy. It's not easy, and each successful, driven developer has spent years learning and fine tuning his craft.

When I was learning to program, if someone wouldn't have forced me to think, I would have failed. It's getting stuck and solving problems that helps a programmer level up.

## Who fixes the $29 code

Someone has to. It's not going to be me. Maybe we can train some $52 programmers to fix it?

Seriously, this is going to end badly. Either these new programmers are not going to make it very far, or they will get hired where someone will reteach them how to program effectively, or they will become freelancers/consultants.

The freelancer/consultant option is the scariest. They don't know what they don't know. And there is a lot they don't know with their $29 education.

Once they've finished, or in some cases just walked away from a project, the product owner will need someone to come in and fix it or finish it.

This makes the software industry worse, not better. We are not creating a better workforce of competent developers that help move the industry and craft forward. We are creating a whole group of developers that are naive and a bit ignorant.

## Are they just library programmers

Maybe the above scenario never happens. Maybe they're trained in how to use tools and libraries. This is entirely possible. A programmer can move along staying inside the safe confides of a library like Rails, Django, or jQuery; and they can build entire applications. There are tools for this type of programmer to make things super easy on them.

But what happens when you take the library away? If you've never had the pleasure of working with a library programmer, let me assure you once they are outside of the walls of their library, they are completely lost.

They have trouble thinking. They have trouble providing solutions. And they usually come to the conclusion that a certain task cannot be done.

This is why some lesser trained or inexperienced programmers have the illusion of programming being easy. It is easy to snap together tools that someone else has written. Writing your own is not so easy.

We need to teach new programmers how to program on their own.


## A lot can be said for learning things the hard way

[Zed Shaw](http://learncodethehardway.org/) is onto something. This is how I learned; it's how a lot of programmers learned, the hard way. The tools that make it easy were not introduced until I knew how to do it by hand. Until I knew how it worked at the deepest level.

When things like Rails or jQuery were introduced, it was amazing and I wondered how I ever did it the old way. The key here is I know how Ajax works, I know how HTTP works, and I know how SQL works. This is a **huge** advantage. One that the $29 programmer doesn't have.

## Take the time to learn how things work

If you are a $29 programmer, remember, admitting it is the first step. Then take pride in the craft of creating software. Learn the guts of the tools you use. Don't use tools you don't understand. Question everything and be constantly hungry for more knowledge. Never be satisfied and continually grow.

Your goal should never be money.
",2013-12-24 14:56:16.966212,2013-12-24 14:56:16.966212,,,
109,I Built A Thing,"This past week I became frustrated with RSS readers. RSS is a large part of my day, and because of that I like for the app I use to be reliable. I don't require too much of the app. Just give me stuff to read and don't do anything stupid.

I won't go into why my previous reader app failed me. You can read all about Feedly and their practices with a quick search. There was too much negative stuff for me and I felt it was time to get out before it got any worse. There is some truth to the statement *where there is smoke, there's fire*; too much smoke for me.

I'm sure Feedly has some great people working for them, I don't blame the employees. It's just not a good option for me.

## Building Tools for Me

One of the goals that I created for this year was to build my own tools. If there is something I do a lot, I should build a tool for myself to use. I don't plan on building these tools to sell, but that may end up happening someday if I think they are good enough.

If you read or follow [Nathan Kontny](http://ninjasandrobots.com/), which you should, he often talks about how be built [Draft](https://draftin.com) with nothing else in mind but to create a better writing experience for himself. He didn't worry about features or lack of. He didn't worry about adding things that other people may have seen as must haves. He just built something he wanted. And then iterated. Nate often talks about how simple Draft was in the beginning.

As a matter of fact, you should go read about [Abe](http://ninjasandrobots.com/abe), where Nate talks about building the simplest thing that could work as a starting point.


## Featureless

That's how I approached this new RSS tool. The smallest thing that does what I need it to do. I want it to do more, but it works as it is. Now I can iterate, and learn.

It's missing a ton of features.

- It doesn't pull in only updated feeds.
- It doesn't track what I've already read.
- I have to manually enter a source.

Here is what it does.

- Pull in a full list of sources and display the last 5 entries from each source.
- Build a list of sources in the sidebar as links based on the feeds it has fetched.
- Replace content with data from a single feed when a source from the sidebar is clicked.


I like what I have built so far in a weekend. It does what I want it to. I can already see some issues that need to be addressed. Those are up next.

- Speed enhancements. Pulling in all sources is very slow. Thinking that maybe pulling in all source urls and fetching the one at a time asynchronously is a better option. It currently fetches them all through a server side API call and then returns a large array of everything.
- Loading indicator. I need something to let me know the app is working on fetching data.
- Error handling. From time to time, a feed will fail to load. When that happens, the app fails silently.

## Learn by Doing

I've learned a lot about what I need from an RSS reader and about the failure points. The way I am accessing sources is still susceptible to failure. If one fails, the whole thing crashes.

I forgot how much fun it is to build these tools. Time just kind of slips away. It's freeing to now have to worry about what someone else might want.
",2014-01-27 13:48:15.396512,2014-01-27 13:48:15.396512,,,
110,Embarrassed And Proud,"Yesterday, I wrote some code that left me half-embarrassed and half-proud. I was half-embarrassed because it was kinda ugly and not very elegant. I was half-proud because it solved my problem very quickly and I was then able to move on to the next thing.

A little background.

Rails 4 has this new method for working with dates in forms called ```select_date```. It should give you the power to generate date fields for year, month, and day when you don't have an object behind them. I needed to program a search form that had many options, starting date and ending date being two of those options. This seemed like the perfect tool for me to use.

I added it to my form and moved on.

Once I finished the backend logic, I headed back to the view to make sure the previous selections were being preselected. For example, if I select March 12, 2013; when I submit the form and get the results, I should still see March 12, 2013 selected.

In previous versions of Rails, I just pass a selected attribute on the end of the method and the options are preselected. That doesn't seem to work with this method.

Here is the method signature.

```select_date(date = Date.current, options = {}, html_options = {})```

Logic says pass the selected attribute with the option I want selected to the html_options parameter.

Nope.

I couldn't get anything to work. I googled. Nothing. I StackOverflowed. Nothing.

All I got was solutions to the previous method ```date_select```. It appears as if I may have used the wrong method? Too late to change now.

After about 30-40 minutes of trying to get a very simple concept to work, I decided to timebox some JavaScript code.

The pseudocode, (not really pseudocode, but I can't think of a better term) went something like this. This is a get request with a query string on the URL.

- Get the url
- Split on ""?""
- Split the 2nd half of that array on ""&""
- Use a regular expression to pull out the date data
- Grab the select and option elements from the page
- Loop through them looking for a match
- Assign the matched option's select attribute to 'selected'

Within 15 minutes I had a working solution hacked together. The options were being selected for me with client-side code.

Here is the code I wrote. You can see the embarrassing parts. There are global functions, but this is a small app and I know for a fact there will not be any collisions anytime soon. And there is some duplication that I could have abstracted out further. I can/will clean it up some, but it's often more important to get something done than it is to create a masterpiece.

[View the Gist](https://gist.github.com/ScottRadcliff/8689650)

<script src=""https://gist.github.com/ScottRadcliff/8689650.js""></script>
",2014-01-30 13:36:15.115717,2014-01-30 13:36:15.115717,,,
111,Using Git For Weekly Project Status Updates,"When I am working on a project, I often like to send a weekly update of things I've worked on or finished.

Git is perfect for this. Pull in a list of commits for the entire week.

```git log --since 1/26/2014```",2014-01-31 16:04:45.256958,2014-01-31 16:04:45.256958,,,
112,Async Javascript Doesnt Work Like I Thought,"Turns out async calls in JavaScript don't work like I expect them too.

I updated the code in my personal RSS reader to use Ajax calls for each source, thinking that it would get content on the screen faster than fetching the data on the server and returning it all once.

I was wrong.

It just ties up the browser. Yes, content gets on the screen more quickly. But I can't scroll or interact with the page at all until all the sources are loaded, parsed, and placed into the DOM.

I have a few options that I could try.

1) Revert back to the loading all data initially on the server side. Then return that data. I will still have the option of selecting a single source from the sidebar and loading data quickly based on what I want to read.

2) Split my sources into groups of like 4. Then get the data for four sources at a time.

3) Add something that allows me to save the updated at time, and only fetch what I haven't seen yet. Not sure if this will help performance or not because I still have to make a http call.

For now, I plan on reverting it back to letting the server fetch everything and return that. That's the better user experience based on what I have so far.",2014-02-03 14:47:27.89544,2014-02-03 14:51:09.152259,,,
113,Sublime Text Keyboard Shortcuts,"This is a [great list of Sublime Text keyboard shortcuts](http://csnipp.com/s/66)

Worth noting that this appears to be a Windows specific list. Replace CTRL with CMD for Mac.

Some of my most used ones are

Toggling the sidebar, in the rare case that I use it (CMD + K + B)

Searching a file or files (CMD +F or Shift + CMD + F)

Select whole word (CMD + D)

Go to anything and command pallete (CMD + P and Shift + CMD + P)
",2014-02-03 22:06:35.701688,2014-02-03 22:11:28.996349,,,
114,Fixing Mistakes With Git,"Sometimes in Git I screw things up. The beauty of version control is that I can always go back and fix what I did. If I add a bunch of stuff and decide it's all crap, I can go back to a previous state.

Unfortunately, it's not a straight forward in Git as you think it would be.

## Revert

From the [man pages](https://www.kernel.org/pub/software/scm/git/docs/git-revert.html)

> Given one or more existing commits, revert the changes that the related patches introduce, and record some new commits that record them. This requires your working tree to be clean (no modifications from the HEAD commit).

This seems like it should work. Find the last commit that you think is the good one and revert back to that commit.

This is not my experience. I struggled to get this to work as I expected. I wanted to go back to where I was before. When I tried, I just got conflicts. And after I fixed them, it still wasn't right.

To be honest, I'm not sure how revert works. Maybe it's just for one commit. More research needed...

## Reset

From the [man page](https://www.kernel.org/pub/software/scm/git/docs/git-reset.html)

> In the first and second form, copy entries from <commit> to the index. In the third form, set the current branch head (HEAD) to <commit>, optionally modifying index and working tree to match. The <commit> defaults to HEAD in all forms.

There are a few ways to use reset, but mine is usually the same and in the third form.

    git reset --hard [some commit]

Usually that commit is HEAD. But as it turns out, I can pass it a sha and it reacts the exact way I need it to.

    git reset --hard 0d1d7fc32

For me, resetting to a previous state makes the most sense. I'm not interested in preserving history. I want to throw these changes away. I really don't want mix up the repo with my screw ups. That's embarrassin'

Worth noting that I had to check out a few branches to poke around until I found what I needed. Actually, I did the whole thing on a branch and then merged that branch once I figured out where my last good save point was.

",2014-02-05 15:30:34.799556,2014-02-05 15:53:52.731717,,,
115,Building Tools For Your Business,"With [37signals](http://37signals.com) announcement of the company restructure they are going through; concentrating on Basecamp and eventually getting rid of everything else, something I saw in a [Joel Spolsky Post](http://www.joelonsoftware.com/articles/fog0000000007.html) years ago in regards to building your own tools still rings true.

>The best advice I can offer:

> If it's a core business function -- do it yourself, no matter what.

Building my own tools is a theme for me this year. 37signals just reminded me how important it actually is.

",2014-02-05 18:42:12.499803,2014-02-05 18:44:14.070305,,,
116,Build Things You Can Show,"If you are interested in the business of software at all, you should be familiar with [Patrick McKenzie](http://www.kalzumeus.com/). This week, his newsletter, while a bit long, was exceptional.

Take the time to [read it for yourself.](https://training.kalzumeus.com/newsletters/archive/do-not-end-the-week-with-nothing)

In it, Patrick talks about about working openly and avenues to create better opportunities for yourself.

> Prefer to work on things you can show. Prefer to work where people can see you. Prefer to work on things you can own.

> Work you can show off, though, is prima facie evidence of your skills. After your portfolio includes it, your ability to sell your skills gets markedly better.

This is so important, and something that I have neglected a lot in the past 3 - 5 years. While I used to spend a lot of time just making stuff and showing it to people. I got away from that and fell into a rut of just working (for the man) and not creating anything valuable for me. I would argue that when I am not creating anything of value for me, I can't possibly create anything of value for my employer/client.

> ...establish an expectation early that you're simply going to talk about what you're doing. I think at Fog Creek / Stack Exchange they call this ""producing artifacts"" ...

Recently, I got back to this. There are a few posts out there describing the things I've been relearning as I build tools and personal apps ([I Built a Thing](http://scottradcliff.com/post/i_built_a_thing), [Async JavaScript Doesn't Work Like I Thought](http://scottradcliff.com/post/async_javascript_doesnt_work_like_i_thought), [Embarrassed and Proud](http://scottradcliff.com/post/embarrassed_and_proud)). It's a little scary because I risk looking like I don't know what I am doing. I really won't know for a while if it will backfire on me, but I hope it helps someone and shows a little about the things I'm interested in and enjoy working on.

I suggest rebuilding the wheel. Build tools for yourself. Explore and learn. Then tell everyone.",2014-02-07 20:52:23.612056,2014-02-07 20:56:21.83627,,,
117,Display An Attribute In Rails Uppercase And Handle Nil,"It may not be obvious, but you can access attributes in Rails through the attributes array. You can use that array to upcase entries and handle nils.

Now anything you through at it, assuming it's an attribute of the object, will either display in uppercase or rescued with an empty string.

<script src=""https://gist.github.com/ScottRadcliff/034ae089b14e86d6ac02.js""></script>",2014-02-07 22:02:43.199393,2014-02-07 22:02:43.199393,,,
118,Recording Myself,"I'm trying something new today. I am using QuickTime to record myself working. I can't record all day, but I can record short bursts of an hour or so. I'm curious to see what it looks like when I am working. What types of things I may be struggling with without realizing it. And areas to optimize my workflow.

This is a two part experiment.

I am a fan of honing my skills. But I can't wrap my head around practicing things that I don't see as practical. Deliberate practice with programming puzzles seems pointless. But what if I practiced something worthwhile? Take Single Page Apps for example. I've been wanting to really dig into single page apps. I'm looking to learn as much about them as I can, and then form an educated decision as to where they sit in my workflow.

What if I build a SPA everyday. At the end of the day I delete it and start over the next day. This is similar to deliberate practice, but it feels more real to me. What types of things would I learn by recording and watching myself build these apps?

I think I will see a lot, but I have no clue what it will be. I can't wait to see how this turns out.",2014-02-11 16:38:38.59922,2014-02-11 16:38:38.59922,,,
119,Too Stupid To Know Better,"> If you treat your employees like mushrooms (keep them in the dark and regularly throw crap on them), it's entirely likely you will get precisely the work you deserve in return.

[Too stupid to know better?](http://sethgodin.typepad.com/seths_blog/2014/02/too-stupid-to-know-better.html) via Seth Godin",2014-02-17 14:00:18.397745,2014-02-17 14:00:34.489026,,,
120,Query Parameters In Rails,"I still love the fact that in Rails or Ruby, while sketching out code to get my ideas out of my head, the code that I think would be ideal is already written.

I didn't know I could call `request.query_parameters` to check for a query string until I thought that `request.fullpath.query_string?` would be ideal.

This is why programmers love Ruby and/or Rails. It fits how we think.",2014-02-24 19:13:57.262807,2014-02-24 19:13:57.262807,,,
124,Autocomplete From All Buffers In Atom,"The more I use [Atom](https://atom.io/), the more tweaks I find I need to make. The good news is that it's pretty simple to adjust the editor. The bad news is that it's not very well documented yet.

I'm so used to searching in all open files for autocomplete, that the default Atom config frustrated me. The fix is pretty simple. Locate autocomplete in settings (Cmd-,) and check Include Completions from All Buffers.

![Atom File Searching Settings](/assets/search-all-buffers.png)

Ahhhh, that's better.",2014-03-10 17:33:53.142978,2014-03-10 17:33:53.142978,,,
125,Lets Talk About Your Api Usage,"Do you build mobile apps of the native variety with APIs? Or do you build mobile apps that you wished had an API? If so, I would like to chat with you a bit. I have this thing floating around in my head about APIs, okay I have a lot of things floating around in my head, but only one is about APIs.

I want to hear about what frustrates you. I think I have a solution, but I need to hear from you first.

If your local, I'll buy you beer or steak or something else. I just want to pick your brain for a few minutes. If your not local, I'll buy you a beer whenever I see you. Promise.

If you're up for it, you can email me at [scott@scottradcliff.com](mailto:scott@scottradcliff.com), message me on Twitter [@scottradcliff](https://twitter.com/scottradcliff), or message me on skype scottradcliff.
",2014-03-13 19:27:29.343958,2014-03-13 19:27:29.343958,,,
126,Subscribing To The Feed,"After tinkering around with this site lately, I noticed that I removed the link to the RSS Feed.

I added it to the sidebar. Feel free to grab the [feed](http://scottradcliff.com/feed.rss) to get regular updates.

Sorry about that.",2014-03-17 16:53:26.864701,2014-03-17 16:53:26.864701,,,
121,Spacer Gifs And Cursor Trailers,"I wish I didn't remember all the stuff that [Zach Holman is talking about](http://zachholman.com/posts/only-90s-developers/) here

The best part of this is the Guestbook link in the marquee actually links to his feedback GitHub repo",2014-02-27 21:19:30.657272,2014-02-27 21:21:53.859757,,,
122,Merging And Deleting Branches Automatically,"If there is one thing I do a lot of in Git, it's merging branches and then deleting them. I have this thing for merged branches laying around. It drives me nuts. I like to keep my repo as clean as I can.

So, I created a small shell script that I can call and pass a branch name to that merges the branch and then deletes the branch in one step.

If you want to use it, place it in your path and make it executable.

<script src=""https://gist.github.com/ScottRadcliff/9270497.js""></script>",2014-02-28 13:13:36.976314,2014-02-28 13:13:36.976314,,,
123,Slow Down And Think,"> When working on a difficult problem, the problem space often exceeds the capacity of your short-term memory. Though some have better short-term memory than others, the really difficult problems are likely to exceed the memory capacity of any mortal. At that point, method trumps raw speed.

[This article](http://lemire.me/blog/archives/2014/03/10/elegance-as-a-luxury/) is amazing, and how I have been approaching software development lately. I personally seemed to have lost the art of thinking slow and making well informed decisions. This is a great reminder why slowing down is important.

As a side note. I have no idea how this ended up in my feed reader, but glad it did. The awesome power of syndication.",2014-03-10 16:35:13.204553,2014-03-10 16:35:13.204553,,,
131,Tired Of Kickstarter,"I'm tired of Kickstarter. It seems we, as a people, have lost the art of building something and selling it. Everything is a Kickstarter campaign.

Now, when I see some product is a Kickstarter project, I immediate lose interest and close the tab.

Show me something I can purchase.

Show me something that you created. Not an idea that may or may not turn out like I expect.
",2014-03-24 21:40:24.372674,2014-03-24 21:40:24.372674,,,
136,First Conference Talk Completed And Whats Next For Code Schools,"
## Got The First One Done.
A lot of questions were floating around in my head as I gave [my first conference talk about teaching programmers](https://speakerdeck.com/scottradcliff/teaching-programmers-through-empathy). Would anyone show? Does anyone care about my topic? How bad will I fail?

It was scary, but my expectations were just about where I wanted them. Actually, [Self Conference](http://selfconference.org/) was probably the perfect conference for me to cut my teeth on. Small enough to be semi-comfortable, but large enough to have plenty of strangers.

I presented on Teaching Programmers Through Empathy. Really I wished I would have called it Teaching Programmers Through Experience, but I still think it went rather well. If you attended, I would love to hear what you thought. Shoot me an email at [scott@scottradcliff.com](mailto:scott@scottradcliff.com) and let me know what you liked and disliked.

Talks are great and all, but it's what happens after it's done that really matters. At the end of the talk, I took a few questions. To my surprise, there were about 5 people interested enough to ask questions. But that wasn't the coolest part. The coolest part was the dialogue. The attendees started to talk with each other and answer each other's questions with their own experiences.

This dialogue was especially sweet because it's part of what I presented on. Open dialogue and collaboration. I don't know if it's related, but I think I'll hold onto the thought that it was.


## What I Learned
I was pretty worried about interest in learning how to teach programmers. I know code schools are doing well. And I know other forms of teaching like apprenticeships and bootcamps are also doing well. What I didn't know was if anyone is thinking about the environments these things are taught in. To take that further, I didn't know if anyone cared about what comes next.

I think we are ready for the next steps. I think more programmers are asking themselves what comes after code schools. Have code schools peaked? What else can we do? How can we make it better?

I'm looking forward to answering these questions and exploring options. With any luck, some conference will allow me to talk about what's next.

## Speaking in Public is a Craft
You never forget how to speak in public, but you sure lose your mojo. When I taught a class every weeks, I was pretty good at speaking in front on people. Granted, it was a lot of the same people most of the time. But I got pretty comfortable and I even liked it a little.

I definitely lost that comfort. I'm looking to practice a lot more and see if I can grow speaking into something. It's definitely a challenge, and who doesn't like a challenge.

---

**If you know of any speaking opportunities, I would love to chat. Shoot me an email at [scott@scottradcliff.com](mailto:scott@scottradcliff.com) or reach out on Twitter at  [@scottradcliff](https://twitter.com/scottradcliff)**

",2014-06-03 15:07:35.084157,2014-06-03 15:07:35.084157,,,
137,Coders And Programmers,"I'm not sure where the conversation started this time, but it has come up again. Someone on the Internet assumes that being able to code is all there is to building apps. That as long as a person can *code*, that's all they need.

And in fact, they could just find anyone that knows how to code, tell them what to do, and off they go punching keys and writing code.

Obviously, nothing could be further from the truth. Programming is such a small piece of the puzzle.

[Dave Winer](http://scripting.com) took offense, and felt strongly enough to [write on his blog](http://scripting.com/2014/06/04/#a1401884889) about he felt.

Dave makes some really great points. I want to touch on a few of them.

## An Immature Industry
Dave says that he is frustrated with the term coder because it seems to go over our head. That it misses some very important parts of our industry, noting leadership and developing new talent. He says that this is due to an immature industry.

I'm not sure I think it goes over our head. I think it's simply ignorance and a lack of effort to understand how software systems are built; web, mobile, or otherwise. To blanket us as _coders_ simply gives someone that doesn't understand our industry and is too lazy to try a blanket term to use. I think this is because they don't understand. The equivalent of saying _I'm not good with computers_. Lack of effort.

Dave also jokes about calling a reporter a keypresser, making the comparison that minimizing the software industry down to someone sitting in a chair entering text into a text editor, is no different from saying a reporter just presses keys.

I agree with Dave, but I don't think this gets us anywhere. This just gives the other industry (the lazy one bundling us as coders) a reason to shrug us off.

But I don't know a better solution. I guess it's education. But that raises another problem. If someone is too lazy to bother researching how software is built, they surely won't bother reading or watching what we produce to help educate them. Although, it's probably still worthwhile.

Dave and I agree that developer is the best term. It fits what I do when building software. It's not just programming. It's thinking, designing (visually and architecturally), and then programming. To have an idea for something and take it from an initial thought to a finished product. Programming is such a small part of that.

## The Art of Building Software
The problem I have with this programmer/coder talk is that it boils it down to a commodity. It's not longer a craft or an art. It's just an activity. I feel it attempts to reduce it  to a statement like _Take a few classes and you too can be a coder. It's easy._

I prefer the creator route. That's how I started. I didn't even know I wanted to be a developer. I just wanted to build stuff on the web and it just kinda grew organically with each step.
",2014-06-05 03:37:28.089887,2014-06-05 03:37:28.089887,,,
138,Readme Driven Development Revisited,"A couple of years ago, Tom Preston-Werner wrote a [blog post](http://tom.preston-werner.com/2010/08/23/readme-driven-development.html) about writing your README first. The basic premise was simple. Before you write any code, write down how it will work. Detail all of your documentation, and then once you have a solid understanding about how your library will work, you then drop back and write the code.

It was quite popular, and a lot of developers loved the article.  It solved two problems. First, it provided a solid way to provide documentation for users of your library. Second, it provided an opportunity to find and think through possible solutions before they were programmed.

Tom stated that we missed something between [waterfall](http://en.wikipedia.org/wiki/Waterfall_development) and [agile](http://en.wikipedia.org/wiki/Agile_development).

On the complete opposite side of this issue, Joel Spolsky wrote a [blog post](http://www.joelonsoftware.com/articles/fog0000000036.html) about creating highly detailed functional specs.

Joel stated that without all the details formally documented, a developer can't possibly know what to build. There are just too many questions that need to be answered, and these questions are easier to answer in a detailed text document.

Joel goes so far as to say that no code is written at Fog Creek Software without a spec.

I think there is some room between the two of these. There is a sweet spot between a README for a library and a fully detailed document for an application.

# Functional Specs
Before I dive into what I think the sweet spot is, let's define what a functional spec is.

A functional spec is document that details all of the user flows of an software application. It goes way beyond just documenting how an app works. It goes into great detail about every possible item in the application. Generally, these documents have wireframes and screenshots of the user interface. A functional spec might go so far as to have personas and scenarios.

The knock on full fledged functional specs is that you can't possibly know everything up front. These specs are directly tied to waterfall. The idea is that a product manager creates these documents and ""hands them over the wall"" to the developers, who then strictly follow them.

The problem with this method is change. As developers learn about the application while developing it, it becomes difficult to add features based on new knowledge because the manager has spent several hours detailing everything.

Joel really goes into detail in his blog series. He makes some great points and has me about 80% convinced that these documents are quite useful.

My problem is that most of these specs go too far.


# Readmes
When Tom described the process of documenting your library or project with a README first, he referenced the fact that we lost something between functional specs and agile practices.

Tom targeted libraries and projects specifically, I tried it out and thought it was great, but I don't write a lot of libraries. I write lots of applications, and in a true agile mindset, documentation before code is evil. So I kinda forgot about it and moved on.

But these types of documents do work with software applications regardless of type. It's super helpful to think through views and features and document how all of that will work.

This leads right into TDD. Something gets lost with user stories. They typically lose context, even with the given when then syntax.

# The Sweet Spot
Okay, so if we have these monster documents that are created in a word processor by some manager and then we have simple text files created by developers, where do they meet in the middle.

Well, the word spec has a bad connotation with it. Traditionalists think of these docs as final and agilists run from them like the plague.

What about guide? What if these docs were not final spec, but guides. Maybe these docs just state _based on what we know right now, this is how the application will work_. The guide then becomes more of a minimum set of features and screens. And it's easier to change a guide. No one feels bad about updating a simple guide that doesn't have three full days worth of work attached to it.

## The Functional Guide
So, this is it. I think a Functional Guide is what serves me best. I can take everything from Readme Driven Development and _some_ aspects from Functional Specs and create a hybrid.

The format depends on the audience. If it's developers, then it should absolutely be a README. If you use markdown, you can add images of wireframes, sketches, or whatever else you need to communicate. Plus, it's diffable in Git. You can update the doc as you build out new features and deploy the new README with the branch you are working on. It just becomes part of the refactoring process.

If your audience isn't developers, then maybe a formal document makes more sense. Something interchangeable, like a PDF. It becomes a little harder to track changes, but it's certainly possible.

In the end, this is really about thinking. Thinking about the users of the software. How will they interact? What is the best flow for them to complete a job? In fact, what [jobs need to be done](http://www.innosight.com/services-expertise/expertise/jobs-to-be-done.cfm)?

One last point. If you've ever been the newest team member, you'll know that it can be really difficult to get up to speed on a project. It would be incredibly useful to have a document that you could look through that detailed the thoughts behind some of the decisions that were made. Bonus points for being able to go through the history of that document.

And finally, I'm just finding what works for me. Maybe this is totally insane to you. I don't know. Maybe your brain is wired differently from mine. I know that when I sit and start typing out how an app should work, it opens a lot of door to ideas that I know I wouldn't have thought of before.

Give it a shot. See what you think.

I'd love to hear your thoughts on what works for you. If you don't mind, send me an email at scott@scottradcliff.com and share your experience.





",2014-07-10 13:33:23.346412,2014-07-10 13:33:23.346412,,,
140,Living Documentation,"> But code only tells you how things work. It doesn't tell you why they should work the way they do, or how they are actually supposed to work.

[David Leal on Writing Living Documentation](http://blog.mojotech.com/why-you-should-write-living-documentation/)",2014-07-15 21:19:01.227896,2014-07-15 21:19:01.227896,,,
141,Questioning Best Practices,"Best practices are great. They allow us to use systems that those smarter than us have laid out because they have found that they work well.

But like anything else, best practices can get misunderstood. As they go from person to person, a little gets lost. By the time the get to, I don't know, say the 1000th person, they may have lost their meaning.

Why do you TDD?

Is it because you have found that this is the best way to build software?

Do you remember what it was like before you started using TDD?

What would happen if you built an entire application without TDD and then covered the parts that were the most important with  tests after?

What about no tests at all?

Challenge yourself to think with individuality. Try new or old things and always question your conclusions.",2014-07-24 13:16:17.846753,2014-07-24 13:16:17.846753,,,
142,Simple Wireframing Tool,"I always forget the the URL of this awesome little wireframing web app. I don't wireframe often, but sometimes I need to communicate an idea more clearly than on paper.

[https://wireframe.cc/](https://wireframe.cc/)",2014-07-28 15:48:37.808897,2014-07-28 15:48:37.808897,,,
143,Nginx Load Balancing,"[Learn Code Academy](https://www.youtube.com/user/learncodeacademy) has a great 7 minute video on load balancing a Node app using Vagrant.


<iframe width=""420"" height=""315"" src=""//www.youtube.com/embed/FJrs0Ar9asY"" frameborder=""0"" allowfullscreen></iframe>",2014-07-29 20:02:55.578488,2014-07-29 20:02:55.578488,,,
144,It Looks So Easy,"""It's just a if/then/else, right?""

""Just put a link to create that report for me.""

I could go on for hours. It's not entirely their fault. Software is incredibly complex, but looks easy. Communicating that it isn't as easy as it looks proves to be more difficult than it should.

[Anthony Colangelo](http://alistapart.com/blog/post/the-most-dangerous-word-in-software-development) touches on why *just* is a bad word in software development. Definitely something every creative person has encountered. Especially when they make it look easy. And all the good ones make it look easy.

",2014-07-30 14:14:20.706854,2014-07-30 14:14:20.706854,,,
146,Creators And Guilt,"[Allan Branch](https://twitter.com/allanbranch) from Less Accounting [describes my feelings about guilt when programming](https://lessaccounting.com/blog/entrepreneur-guilt/).

Allan uses entrepreneurship as a basis for an example of feeling guilty about not getting enough work done, or working too much, or not actually finishing anything. I feel all of these as a member of a dev team. Not necessarily an entrepreneur role, but all the same symptoms.

Here's how it feels for me.

## Feeling Guilty for not Working Enough

I thought it was just me, but I guess not. I will often look at my work at the end of the day and have this feeling of not pulling my weight. Feeling exhausted from working my tail off all day, just to see that it doesn't look like I got much done.

Now that I am on a team, I have this feeling of making sure I don't let the rest of the team down. It's true that I definitely have more days where I feel bad about what I've done rather than proud of the amount of work I've contributed. I don't know what the fix is. I've tried a few things. Instead of just tracking what I believe are billable hours, I have tried tracking everything. Not for the ""boss"", but to help me see that even when I am not producing billable hours, I am still contributing something to the team. Honestly, it doesn't help much. When it's the end of the week and it's time to submit hours and they are lower than I think they should be, that guilt is still there.

## Feeling Guilty for Working Too Much

There is a flip side. Working so hard to get to a point where you feel you are contributing enough that you actually work too much. This feels equally as bad. As Allan mentions in the article, when you put in extra hours to compensate, you have to take them from somewhere. For me it's my family. The words ""Dad, you work too much"" are spoken more than I would like to admit at my house.


## Making Assumptions

I think a large part of this are assumptions. Most of us have other people we work with. And most creative people set very high standards for themselves. It's easy to _think_ that the other person is not happy with what you are producing, when in fact you really don't know what they think. I'm super guilty of this. I often assume that I know what the other team members must be thinking. This is dangerous.

I'm going to list a few things that I think might help with guilt

1) Never assume you know what the other team members are thinking. Always ask if you really want to know. Beware. You may not like what you hear.

2) Keep an open mind about what contributing actually is. If you're a developer, it doesn't always have to be lines of code. If you're a designer, it doesn't always have to be sketches or comps. You bring way more to the table than what your hands can do.

3) It's okay to give an honest day's work. And sometimes a honest day's work falls short of your expectations. That's okay too. Nobody died and you can try again tomorrow.

",2014-09-30 15:53:01.400611,2014-09-30 15:53:01.400611,,,
147,Code Is Art,"> Programmers need to claim the extraordinary nature of what they do.

[Is Computer Coding Art?](http://www.newrepublic.com/article/119215/geek-sublime-vikram-chandra-review-coding-art)",2014-10-01 17:12:42.814039,2014-10-01 17:13:04.448534,,,
148,Take Your Time,"This is a great reminder to slow down and **think**. Do your best work.

Definitely something I struggle with.

[Writing Good Software Takes Time](https://tommcfarlin.com/writing-good-software/)

",2014-10-01 18:46:49.480137,2014-10-01 18:46:49.480137,,,
149,Seven Day Startup,"[7 Day Startup](http://wpcurve.com/the-7-day-startup/)

Dan Norris has written a free e-book on starting a business in 7 days based on his experience. How you feel about the book will probably vary based on your exposure to the startup world and/or bootstrapping businesses. There is nothing about VC or pitches. Just a game plan for worrying only about stuff that matters and how Dan approaches his business.

I had heard most of this stuff before. But I did enjoy the book and it has changed my thoughts on an upcoming project.

Hey! It's free. [Go read it](http://wpcurve.com/the-7-day-startup/).",2014-10-02 02:09:46.584718,2014-10-02 02:17:16.33228,,,
150,Paul Graham On How To Start A Startup,"By far the best talk from [How to Start a Startup](http://startupclass.samaltman.com/) so far. Entertaining, informative, interesting, and valuable.

<iframe width=""560"" height=""315"" src=""//www.youtube.com/embed/ii1jcLg-eIQ"" frameborder=""0"" allowfullscreen></iframe>",2014-10-02 03:32:37.344227,2014-10-02 03:32:37.344227,,,
151,Solving Problems,"This is a great piece about what it means to build software. This is exactly where I am at.  Programming for programming sake doesn't excite nearly as much as it used to. Solving problems is what gets me up in the morning and excited to build software.

> I’m not coding. I’m not building a business. I’m not going to school.

Yep. But I'm not totally on board with not building businesses. I think that's a part of it for me, just not the main part.

> I’m here to solve problems.

Solving problems is the main part. The most important.

via [Throwing Fireballs](https://medium.com/@twelveonetwo/throwing-fireballs-95e9cf9e15c7)",2014-10-14 17:20:35.039558,2014-10-14 17:25:50.371747,,,
167,How To Know What Controller Ember Wants You To Use,"As I continue my dive into JavaScript frameworks and currently working with Ember, I really struggle with knowing what Ember wants  me to do.

With Rails, the server log usually gives me a clue. With Ember the server log, or output, is less helpful. Part of the reason for this is because Ember seems to silently handle errors. I think part of the reason is that Ember is doing things for me, and part of it is the fact that JavaScript **loves** to fail silently.

When working with a feature in an existing Ember app, I needed to now what controller Ember expects. I had a form using [Dockyard’s](http://dockyard.com/) super cool [EasyForm](https://github.com/dockyard/ember-easy-form), but every time I submitted the form, the console would yell at me saying that my controller didn’t handle the action.

After hours of reading docs and trying to understand how the controller was wired up for this form, a coworker had the perfect solution.

    {{controller}}

Place that code in your template and it will print what controller that template is tied to.

I think of this as similar to Ruby’s `debug` method, where I can print out data in the view so I can try and diagnose errors I don’t understand.

It’s not a great solution. Some sort of proper debugging method would be way more helpful, but it works for now.

If you know of a better way, please let me know.
",2015-03-05 13:12:11.214091,2015-03-05 13:12:11.214091,,,
152,Continuous Improvement,"It's funny. I think a back to where I was when I was a total newb. There was so much I wasn't good at. It was easy to spot weakness. Pick one weak point and improve. When I thought that was at a good point, pick another one. Repeat. Eventually, through the process of elimination, I got better.

It's easy to lose this skill of noticing weakness and improving. Well, losing isn't the right word. Ignore is more fitting. It's easy to ignore your weaknesses, especially when you work alone.

The minute you join a team, those weaknesses are exposed with a total disregard as to whether you want to address them right now or not. You have to. The choice has been made. Level up.


**Noticing Weaknesses and Building on it**

At first, it just crushes your ego. It's like being a newb all over again. It's really easy to get down on yourself when you have done what you swore you would never do. You failed to keep up. You fell behind. But not all is lost. It's actually pretty easy to get back on your feet.


**Setting Some Measurable Goal Each Week**

First, pick one thing your not very good at. Maybe it's code reviews. Maybe it's testing the right things. It could even be as simple as communicating better. Actually, if you suck at communicating, do that first.

Once you have this skill you want to level up, make it your goal for the next week. But it has to be measurable. You have to be able to look at this week and know that it's better than it was last week.


**It's really all about shipping**

For me, it's all about shipping. If I am shipping more, I am leveling up somewhere. If it's communication that I am working on, and I shipped more software this week than I did last week, I can look and see why. If communication was a big part of that, it will show.

Than I move on to the next thing. Get better every week.
",2014-10-17 21:11:47.141222,2014-10-17 21:11:47.141222,,,
153,What Would You Do With The Skills You Have If Not Driven By Money,"I posted this to facebook yesterday. Just something that has been floating around my head lately.


There is this question that's been floating around in my head for two days. What would you do with the skills you have if not driven by money, but driven by societal change. In other words, if you could forget about money and only concentrate on touching/changing lives everyday, what would your work look like?

It's especially interesting in my field (software), where we throw millions at useless companies that provide very little value to society. What if we threw just a fraction of that to a company that really puts a dent in something real. Off the top of my head, I can think of hunger, homelessness, retraining the unemployed, domestic violence, human trafficking, and the list goes on and on.

What if you/I only worked on projects that helped improve humanity? The first issue is money. I mean we have to eat  I don't have no answer ""yet"", but I have the beginnings of a thought. If we can throw 55K at [potato salad](https://www.kickstarter.com/projects/324283889/potato-salad), surely we can crowd fund a developer to work on nothing but software that promotes social good for a year.

To be continued...

",2014-10-21 14:40:54.533133,2014-10-21 14:40:54.533133,,,
154,Shipping Something,"Ouch. Seth Godin nails it. Again.

On taking the plunge and shipping something.

> It's easy to be afraid of taking a plunge, because, after all, plunging is dangerous. And the fear is a safe way to do nothing at all.

Source: [Taking The Plunge](http://sethgodin.typepad.com/seths_blog/2014/10/taking-the-plunge.html)",2014-10-22 14:04:51.250551,2014-10-22 14:05:14.369503,,,
155,Hits And Misses,"Last night Kobe Bryant, arguably one of the best basketball players of all time, set a [new NBA record](http://espn.go.com/los-angeles/nba/story/_/id/11862042/kobe-bryant-los-angeles-lakers-sets-nba-record-missed-field-goals). **For misses**.

He has missed 13,418 times. Yet, he has 5 championships.

He has 5 championships because he doesn't know how to quit.

This was a great reminder that no matter how many times I fail or screw things up, I need to get up and try again.",2014-11-12 15:17:03.103698,2014-11-12 15:17:03.103698,,,
156,I Want To Start Teaching Again,"Teaching is fun and I miss it. When I taught, I had this great sense of helping people that is *really* hard to describe until you teach someone. There is this real sense of pride in knowing that you helped someone acquire some skill that they didn’t have before they met you.

Most of this happened in a classroom for me. I learned a ton about how to approach teaching, but honestly, our secondary education system is awful. It’s all driven by money. They teach what the dollars tell them to. That is why I left. I could see the program that I was part of head in a direction that I didn’t agree with.

I’d like to teach again.

## How do I want to approach this
I have a few ideas of how to approach this. After all, I’ve been thinking about this for years. But I think for now I would just like to use the Internet as my platform to produce teaching material. Tutorials, both written and video, and both here and elsewhere. Maybe a downloadable PDF or two. I might even have an ebook of some sort in me.

The Internet is the perfect platform for teaching. We have barely scratched the surface of what we can use the Internet for as far as learning/teaching is concerned. I would like to experiment with this. There are plenty of bootcamps, code schools, and similar options. But where are some of the experimental things that venture into new ways of learning? It’s worth noting that [Code School](https://www.codeschool.com/) is the best of any code school that I’ve seen. The way their system integrates learning and repetition into their screencast system is awesome.

The best thing about teaching is the learning. I wonder if I could pick things to learn by teaching and just start writing tutorials based on that? The problem with this is that I am teaching something I don’t know much about. This might work if it’s in small portions. Maybe something like the old Railscasts site. That might be fun.

Another option is to start a new site of just tutorials/learning materials. The downside to that is that I would have another site to maintain.

And yet another option would be to use something like YouTube to host some videos of learning materials.

Maybe it’s just as simple as a new section on this site.

The common core of all of these is that it’s some sort of publishing platform. If that’s the case, I’d like to own it. Putting my work on someone else’s platform is scary. Considering I have the skills to build my own system, I’d be stupid not to own the entire system.

At any rate, I have no idea will this end up. I do know that I would like to start small, and start branching out into technologies that are currently not being used.



",2014-12-01 14:13:12.636468,2014-12-01 14:13:12.636468,,,
158,Getting Started With Web Development,"If you are thinking about getting started with any type of web design or development, you have likely seen **lots** of stuff about code schools, Rails workshops, and bootcamps. Not so much about how to get started as a complete newbie or how the very basics of web design and development work.


I'd like to take a few moments and explain to you how the core of *anything* on the web works. The reality is that without HTML, we can't display anything on the web. Without HTML, none of the previously mentioned ways about learning matters. HTML is the foundation of the web.

HTML isn't that hard or scary, and once you understand it, things really start to make sense.

## How HTML Works
HTML is an acronym for HyperText Markup Language and it's core job is to display what you tell it. HTML will not decide *how* to display anything. It will know what to display what you tell it to.

The first thing to understand is that HTML is just a text document. It's just like any other document. The only difference is how it's formatted and it's file extension (*the .html part*).

**Warning: Microsoft Word, Apple Pages, or any other Word Processor does not create text documents. I am referring to plain text documents. You will need a text editor. Check out [Atom](https://atom.io/) or [SublimeText](http://www.sublimetext.com/).**

To create an HTML file, you can simple open a text editor, create a new file with any name, and save it with an html extension. A sample html file might be called `intro.html`

It could look like this:

    <html>
      <head>
        <meta charset=""utf-8"">
        <meta name=""description"" content=""my first webpage"">
      </head>
      <body>
        <h1>Hello World</h1>
        <p>My First Document</p>
      </body>
    </html>

## HTML Tags
If you have never seen HTML before, there is a lot here. I'll break it down.

**The `<html>` element should actually be &lt;!doctype html&gt;, but the browser tries to display a new document. You can google HTML5 doctype to see how it should be formatted**

The first thing to notice is all the greater than (>) and less than (<) signs. These are part of HTML tags. Inside this greater than and less than signs are HTML elements. This is the part that tells the web browser what to display. You can see a [full list of HTML elements on Mozilla's Developer Portal](https://developer.mozilla.org/en-US/docs/Web/HTML/Element).

Anything you place between the opening and closing tags are part of that element. For example, `<h1>Hello World</h1>` is a heading that displays the text Hello World because we have instructed the browser to display a heading by using the `<h1>` html tag, and to make that heading read Hello World because we placed that inside the opening and closing tags.

Some tags don't have the closing part. These are self-closing tags. More on those another time.

## Head Section
Once you get past the doctype, you see two sections. Head and body. These are the main sections of the document. First the head section. This is all meta data. It's just giving the document information. If you look at the `meta` tags, you will notice that the description meta tag has a name and content. This tells the browser and search engines (we will save search engines for another time) what this web page or web site is about. It does absolutely nothing for what is displayed on the page.

Later on in your learning, when you get into CSS and JavaScript, this is where you will tell the document how to get to those files.

## Body Section
Think of the body section as your canvas. Not to be confused with the JavaScript canvas. I'm simply using the word canvas here to illustrate that this is the part of the document that you actually see.

Anything you place between the opening and closing body tag will be displayed on the page.

In this example, the html page is displaying Hello World as a heading, and My First Document as a paragraph.

You will notice that a lot of HTML elements are simply abbreviations of larger words. Things like img for image, p for paragraph, and a for anchor.

The body section of HTML documents can get pretty complex with things like forms, large images, and complicated layouts. Understanding what is in the body section is critical. It can get overwhelming very quickly. Spend some time playing around and continually build upon your knowledge.

## Go Forth and Play!
Well, that's the basics of an HTML page. If you follow that structure, you will just need to know that elements to use to display what you want. That just comes with experience and playing around. Spend some time on [Mozilla Developer Portal](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) and start experimenting.

If this helped you at all, I'd love to hear from you. Reach out to me on Twitter [@scottradcliff](https://twitter.com/scottradcliff) or [send me an email at scott@scottradcliff.com](mailto:scott@scottradcliff.com).
",2015-01-17 14:55:15.480776,2015-01-17 15:12:57.920789,,,
159,How To Get Started With Css,"Once you master HTML, it's time to style what you have and level up. And that means CSS. Before we get into all the nuts and bolts of CSS, I want to take a minute and explain what CSS is, what it's used for, and what not to do.

CSS is yet another acronym in a very long line of acronyms you will learn if you want to make web sites. It stands for Cascading Style Sheets, and is a way to target specific HTML elements on a web page and add styling to them.

That styling can be color, size, shape, effects like drop shadows, or even the position of the elements.

While HTML is pretty straight forward, CSS is a different animal, and can become quite complex. I will spare you the hard stuff and concentrate on the basics to get you going.


## Style or File
CSS can be added a few ways. The two main ways are in the head of the HTML document, and in a file that is linked into the head of the HTML document.

To include CSS in the head of the document, you define a style section.

    <style>
      CSS stlyes...
    </style>

To include a file, add a link to that file.

This example assumes the file is named main.css in a folder called styles.

    <link href='styles/main.css' rel='stylesheet' type='text/css'>


## Syntax
The syntax of CSS differs some from the syntax of [HTML](http://scottradcliff.com/post/getting_started_with_web_development). In HTML, you have tags that use < and > with elements in between.

CSS has an HTML selector, followed from curly braces {}, and a series of key/value pairs separated by a semicolon. If you have zero programming experience, this will be your first foray into curly brace syntax. This type of syntax will carry over into many languages. **CSS is not a programming language. But it does share some syntax.** That is where the similarities end.

An example.

If I wanted to access all paragraphs on the page and set the text to bold (a terrible idea, but a decent example), I would access the p tag and set the font-weight to bold.

    p {
      font-weight: bold;
    }

The CSS declaration starts with HTML element `p`. This grabs all paragraphs on the page. Then the opening curly brace tells the browser that we are ready to define what each paragraph looks like. Then we start with the styles. The `font-weight` declaration tells the browser that we want to define the text of the paragraph. Specifically the weight of the text. When we define bold, we tell the browser to make everything in there as bold as it can. We could have passed other values in. Instead of bold, we could have said normal, bolder, or a any one of (100, 200, 300, 400, 500, 600, 700, 800. 900); each of those a little bolder than the previous, and finally inherit.

Mozilla is your friend and has an [awesome resource](https://developer.mozilla.org/en-US/docs/Web/CSS) for what's available with CSS.

## The Cascading Part
Now that we have the basic syntax out of the way, you'll notice that we just used an HTML element to grab all of the elements on the page. That's great. But what if we just wanted the first one, or the last one, or even one in between. We can use ids to get specific.

To use an id, you just add an id attribute and give it a unique name. Ids must be unique and cannot be duplicated on the same page.

    <p id='first-paragraph'>text here</p>

Now, in your CSS declaration, instead of using just the HTML element, we can add the id selector.

    p#first-paragraph {
      font-weight: bold;
    }

You will notice the pound sign #. This is how you will select any id. This grabs just that one element and applies styles to it, but leaves all other paragraphs alone.

## Playing, Learning, and Progressing
That is the basics. With this you can grab and style anything you need to on your webpage and start styling them.

Play is important. Visit the [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/CSS) and start playing with some styles and see what you can come up with.

Enjoy!
",2015-02-03 13:59:58.01354,2015-02-03 13:59:58.01354,,,
157,Start Writing To Think,"The next time you are stuck on a programming problem that you are trying to solve. Things just aren’t clicking. You can’t seem to wrap your head around what a solution might look like. Just start writing.

Open a text file and start writing what the problem is and what a solution might look like. Really go into detail. Explain the edge cases, any parameters that will effect behavior, and any errors that would be returned.

Think of this as explaining to someone how to use your software.

I realize this may sound a little goofy. Consider it the solo version of explaining a problem to someone. You are, in fact, explaining the problem to someone. That someone just happens to be you. And you are explaining it to understand it. You get an added bonus of being able visualize a good design from a bad design _before_ you program it.

## The Perils of TDD and the Lack of Thinking
I’ve sounded off before about [losing the planning stage with TDD](http://scottradcliff.com/post/readme_driven_development_revisited). When you start out doing TDD, people _rarely_ talk about thinking through what you are building or thinking about what you need to test. That is, aside from [Rich Hickey](https://www.youtube.com/watch?v=f84n5oFoZBc), but he’s not really putting it in a TDD context.

Most of the TDD examples just jump right into code and driving your design through tests, and that’s great, but when you don’t know where you are headed, you’re really just wasting time.

Writing about the problem and your solution will give you a solid end goal. And with that end goal, you’ll be able to start thinking about all the pieces that will need tests.

It’s at this point that you can jump into a TDD workflow. You have a solution in mind and a good idea of the steps needed to get there. Those are your test cases.

## Example Time
So what does something like this look like?

Here is a super hypothetical example of a feature that allows someone to share something on a fake site called SuperDuper and then sends the result back to an API.

_When a user shares the link on SuperDuper, we get an id back of the post. That id gets saved to a cookie and a POST request is sent to api/superduper/:id, then a new Order record gets created and a success message is returned._

_If the user tries to share but it fails, the application will take into account that the user tried, but the failure was not due to user error, but rather a system error._

So, what did learn by taking the time to write this out?

- We learned what the url structure of the API might look like.
- We learned that we need to store some data in a cookie or other storage mechanism.
- We discovered that we have some specific errors that could require special consideration. Maybe we have two types of errors?

This type of communicating to yourself almost always exposes something you might have missed. The one that sticks out to me are the two types of errors. User and system. This would certainly lead to a better design and a better experience for the user after taking these errors into consideration.

## One System to Rule Them All
Building software really is a personal thing. Even on a team, developers have personal preference and often have to make trade-offs in favor of the way the team likes to build software.

There is no *right* way.

This is just one of many ways to build software. I often drop back to this when I am stuck.
",2015-01-07 01:51:35.322604,2015-01-07 01:53:28.540372,,,
160,Learn How To Make Websites With A Detailed Guide,"I've been working on something. I've been thinking about for a few years. Right about the time I quit teaching.

I asked myself where do people go when they want to learn how to make websites, but don't know where to start?

What about people that think dev bootcamps are overkill, or think they just cost too much?

I remember what that's like. This was me about 10 years ago. I didn't know anything. I had no idea where to start. I just knew that I was ready for something new.

I was ready to change lanes and go in a different direction.

I am combining my experience learning how to, and making websites, into a guide that sets you up for success and shows exactly what you need to do to get started.

I'm calling it Changing Lanes: a step by step guide on learning how to make websites.

You'll learn.

1) An introduction into web design and development.
2) An introduction to Web Standards. What they are and why they are important.
3) How to find answers to your questions. Where to go and how to ask for help.
4) How to separate presentation, structure, and behavior for your website.
5) A brief overview of HTML. How it works, how to write it, and where to find more information.
6) A brief overview of CSS. How it works, how to write it, and where to find more information.
7) A brief overview of JavaScript. How it works, how to write it, and where to find more information.

The book will sell for $10. But I am offering a pre-sale for $5 with a sample chapter included.

If you buy the book now, you will get the sample chapter in PDF form on how to ask questions and an overview of how browsers work, and the complete book in PDF on Monday with all updates to come after that.

**[Pre-order Changing Lanes for $5](https://gumroad.com/l/changinglanes)**


",2015-02-13 16:12:37.984445,2015-02-13 16:14:53.708421,,,
161,A Few More Chapters To Go,"I just finished up the initial section on HTML. Still needs to go through some editing and formatting.

Deciding what tp concentrate on was a little harder than I thought. I feel myself diving into the more technical stuff, and that's not what **[Changing Lanes](https://gumroad.com/l/changinglanes)** is yet.

After the first draft of the HTML chapter, I included

* How it's the backbone of the web
* Syntax with elements and attribute descriptions
* Document structure with doctype, head, and body
* And a note on viewing local files in the browser and viewing source

Here's a little sample

<hr>

## Document Structure

To wrap up our intro to HTML and send you on your way to learning the foundation of the web, we need to understand the document structure of HTML.

First, all HTML is just a file. Like any other text file on your computer. To create a new HTML file, open up one of the text editors I mentioned in the beginning of this book and create a new file. Save it as `index.html`.

That’s it.

That `.html` extension makes it an HTML file. Now you are ready to fill it up with HTML.

A little about the document structure of HTML.

There are two distinct sections to an HTML document. The head section, where all of the data goes. And the body, where everything you see goes. I often refer to the body as the canvas of the web page.

One more little side note. In addition to the head and body sections, there is a `DOCTYPE`. It’s not really a section, but more of a declaration. It tells the browser _This is an HTML document. Display all this stuff as HTML_.

It we had a skeleton of an HTML document. It would look like this.


    <html>
      <head>
      </head>
      <body>
      </body>
    </html>


You may notice some indentation. This is not required, but certainly helps seeing that a certain tag is inside of another tag.

You may remember that all HTML tags have a closing tag (some are self-closing). You may also notice that we start with an `<html>` tag, and it has a `<head>` and a `<body>` tag nested inside of it. We know this because the closing tag is at the bottom.

The `<head>` and `<body>` tags are part of the content of the `<html>` tag. When I use the indentation, I can see that these are part of something else. Not a big deal with a skeleton of an HTML page, but a huge help with a large page where it’s a little harder to find things.

<hr>


Now onto CSS,  JavaScript, and closing it up.

Remember, you can **[pre-order Changing Lanes](https://gumroad.com/l/changinglanes)** if you are looking to learn how to create web sites.",2015-02-13 17:49:12.576396,2015-02-13 17:55:18.385202,,,
162,Auto Repair Businesses Are Clueless,"I'm setting here in a car repair place using their completely crappy wifi. Seriously. This may be the worst wifi I have ever experienced. It would be better to not offer any.

But that's not what I want to talk about. I want to talk about how incredibly terrible these places are. There are reasons why customers don't like coming here. They get taken advantage of. Every single time. Call it an upsell if you prefer, but that isn't what it is. It's taking advantage of your customer because you have the upper hand. It's cheap, unethical, and void of any morals. Just awful.

So if the way most mechanics try to **cough** upsell **cough** their customers is wrong, what could they do differently?

Simple.

Provide the customer the service they **need**. Or the service they **asked** for. And then take your upsells and compile them into a list. Provide that list under the current charges with a **valid reason** why the customer might want to purchase them.

Provide them what they asked for, and what you suggest. Allow them to just buy what they want. Without hassle.

Present the additional services as problems being solved. There is not a customer in the world that cares about something, let alone paying for something, that isn't a problem.

>>Here are your charges today Mr. Radcliff. I've taken the liberty to add some suggestions below. Ohio winters are really hard on vehicles and these services will help keep you running with piece of mind that a family member won't be stranded somewhere with a broken vehicle.

You got me! You just told me that this will help make sure my wife doesn't get stuck somewhere. That is super important to me. And I'm reaching for my wallet.

Stop preying on your customers.",2015-02-18 16:06:42.372198,2015-02-18 16:45:22.574347,,,
163,A Beginners Mind,"I never really thought it would happen. I never thought I would be the guy that was having trouble learning new things. Learning new ways of progressing my craft.

But this has happened. I’m a beginner again and it’s proving to be difficult.

I’ve been using Ember on a project and on most days I’m drowning. Ember does a lot of stuff I don’t understand. Figuring out what that stuff is, is the hard part.

Ember really isn’t a DOM framework. JavaScript works differently inside of Ember. I have to change the way I think of JavaScript. It’s no longer elements and traversing through them. It’s now all objects and properties.

Objects and properties aren’t difficult to understand. That’s just basic programming stuff. It’s how they get wired up that doesn’t make sense most of the time.

I think this would be much easier for a beginner. If someone doesn’t have any prior knowledge of DHTML and jQuery, there are fewer hurdles to get over.

I’m starting to come around to Ember. It certainly hasn’t been easy. I have to swallow a lot of pride. I have to ask a lot of questions that seem simple. These are questions that I haven’t asked in years. Things like how to submit form data. Stop laughing. Or how to link pages together.

If you have been programming for a while and are thinking about trying out Ember. Forget what you currently know about JavaScript, forget the DOM, think in objects and properties, and know that there is **a lot** of magic.

Timebox the feature you are working on. If you can’t get to a working solution in that time, swallow your pride, and ask for help.
",2015-02-28 14:32:56.827407,2015-02-28 14:32:56.827407,,,
164,The Startup Community And Pyramid Schemes,"It’s no secret that I have an issue with Startups. Not the idea of startups, but the community around startups. The whole thing is based on *getting a hit*. Building something you don’t care about to get rich. In it’s essence, the majority of the startup scene is equal to a giant get rich quick scheme. And if you’re a developer, it’s more like a pyramid scheme and you are at the bottom doing the work and getting the least reward. Unless of course, it’s a hit. Then you get climb up the pyramid and be a cherished success story.

Business, at it’s core is not that hard.

Here it is, in it’s simplest form.

Find a market

Discover what that market wants/needs

Build what that market wants/needs

Sell the product

You don’t need some stupid [vocabulary](http://techcrunch.com/2014/12/15/how-to-speak-startup/). You don’t need follow some stupid community that is run by billionaires that want to capitalize on your skills. All you need is a problem to solve that is worth paying for and the skills to solve it.",2015-03-01 21:55:51.623754,2015-03-01 21:55:51.623754,,,
165,Presenting About Remote Teams At Self Conf,"I will be presenting at [self.conference](http://selfconference.org/) on May 29-30. Not sure about the time slot yet.

I’ve been working on 100% remote team for about six months, and it’s been unlike any remote team I have been on before. Some things have worked well for us, and many things have not.

I will be presenting on what we have learned about [working remote](http://selfconference.org/sessions#session_37). Some things you can try, what types of things you want to avoid, and some tips to help make your team a little tighter when you are all spread out.

Hope to see you there!",2015-03-02 17:26:52.420646,2015-03-02 17:26:52.420646,,,
166,How To Clear A Sqlite Database With The Sequel Gem,"I’ve been playing with a new [Sinatra](http://sinatrarb.com) app. While I am building it out, I am getting back to basics. I’m only adding what I need as I need it. I really have no preconceptions of what I am building. It’s a journaling app, and I am just starting with a big ‘ol textarea.

Keeping with simplicity, my database is super simple. I am just using [sqlite](http://www.sqlite.org/) and accessing it via the [Sequel](http://sequel.jeremyevans.net/index.html) Rubygem.

While putting things together, I had some crappy data I wanted to clear out, but didn’t want to write some method to reset the database or setup environments yet. Turns out it’s pretty simple with Sequel.

With a sqlite database called `journal` and a table called `entries`, in a terminal, I just run

    sequel sqlite://journal.db

This drops me into an [irb](http://ruby-doc.org//stdlib-2.0/libdoc/irb/rdoc/IRB.html) session with `DB` setup as my database.

Sequel implements a [`drop_table` method](http://sequel.jeremyevans.net/rdoc/classes/Sequel/Database.html#method-i-drop_table)

    DB.drop_table(:entries)

Now I have my clean database.",2015-03-03 14:24:14.563937,2015-03-03 14:26:50.693913,,,
168,Why Am I Not Deploying With A Post Receive Hook,"I'm the type of guy that likes control. I like to know how things are working so that when they break, *and they will break*, I know how to fix them. This can be a good thing and a bad thing. It's a good thing because I think it makes me a better developer. I've never regretted learning something about the systems I work with. It's bad because I generally don't like systems that do stuff for me. Even though they may be saving me work.

Take Heroku for example. It can save a ton of time. But what happens when it breaks? What happens when it doesn't support what I want to do? As far as I know, I still can't write to the file system on Heroku. So I don't use it for my projects. I manage my own VPS. It's not that hard. Seriously.

Even though managing a VPS is relatively simple, it can make deploying more work that it has to be. Capistrano and other tools are way too much.

I've done dinosaur deploys for a long time. Push to some repo. SSH into my server, pull, and run any asset or bundling tasks I need.

That is until I started looking at `post-receive` hooks in Git. These are **awesome** and exactly what I need. I haven't played with them yet,  but I will be. I think I can squeeze in an hour or so to play tomorrow.

Here is one of the better articles on how `post-receive` hooks work when you host your own git repos.

[https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks](https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks). ",2015-03-24 23:42:54.424183,2015-03-24 23:44:48.763768,,,
169,Apparently I Customized My Irb Prompt,"I just logged into a server for the first time in a while and saw something I forgot I did. I forgot I updated my irb prompt to say 'Sup Bro'. I really have no idea why. I was just playing.

I imagine I put this in `.irbrc` somewhere, but can't find it for the life of me.

![](https://www.evernote.com/shard/s4/sh/80c8d5a2-3684-4aff-95a9-bf697f93165b/1aedbdb66ef4988c61925e8f765b3803/deep/0/1.-deploy@Staging---var-www-snip-(ssh).png)
",2015-03-25 00:10:13.615383,2015-03-25 00:10:13.615383,,,
175,Doing Your Best Work,"I’ve been thinking a lot about doing my best work. I ask myself questions like *If I didn’t get paid, would I still do what I do everyday* and *What would it feel like to be immensely proud of what I’ve done*

This really has nothing to do with employers, clients, or friends. Most of the time, what they hire/ask me to work on is important to them. But not necessarily the most important thing to me.

Recently, I was asked what the most important thing is to me regarding work. Without hesitation I stated that building software that changed someone’s life. Something that didn’t used to exist, but now does, serves a *real* purpose, and allows a person to do something that they couldn’t do before was the most important thing.

You can take everything else away. Money, pool tables, cool offices, work when I want, or anything else. Once you reach a certain point, none of those perks matter. And this is what money driven people don’t get. Not everyone cares about being rich. Some people just want to leave a legacy, a body of work that meant something. You can’t buy that.

So, I thought to myself. What are some good examples of this. This is by no means a complete list, but here are some examples of people changing lives through software.

**[Infiniteach](http://infiniteach.com/)**

> Infiniteach was founded to change the way we approach autism education. We believe that every child with autism should have unlimited access to proven strategies that can increase their independence and help foster meaningful relationships.

<hr>

**[Prana Diabetes](http://www.pranadiabetes.com/)**

Prana Diabetes helps address the growth of diabetes in India.

<hr>

**[Totus Power](http://totuspower.com/)**

Totes Power is using portable power from electric car batteries to provide battery packs for schools in developing countries.

<hr>

**[Charity Water](https://charitywater.org)**

Charity water gets clean, drinkable water to countries that don’t have it.

<hr>

**[Kno Clothing](http://knoclothing.com/)**

> Kno Clothing is more than threads on your back. It’s about ending homelessness. Every time you make a purchase, we donate an article of clothing to those in need and fund organizations who help restore the lives of people experiencing homelessness in local communities.

<hr>

**[Catchafire](https://www.catchafire.org/)**

Catchafire matches those with skills to non-profits or other organizations that need help but are light on funds.

<hr>

The world needs more of these.
",2015-05-06 15:00:14.84471,2015-05-06 15:02:58.660395,,,
170,Tell Rails Which Record You Want,"Did you know you can tell `ActiveRecord` which record you want in plain english up to the fifth record? I didn't.


`User.first`

`User.second`

`User.third`

`User.fourth`

`User.fifth`

All of these return the record you asked for. This is great for playing in the console and needing a specific record. I use this all the time when developing with just  few records.",2015-03-26 13:45:44.035467,2015-03-26 13:47:19.107186,,,
171,You Only Get One Life,"In [The Case for Leaning Out](http://kernelmag.dailydot.com/issue-sections/headline-story/12309/leaning-out-work-life-balance/), Nico Lang describes the American work ethic. No, ethic isn't the right word. Obsession. That's better. Nico Lang describes America's obsession with work. We work at work, after work, before work, when we are with our families, and even when we are on *vacation*.

This article hit me right between the eyes. As a developer, it's super easy to get caught up in dollar signs and the glorified startup life. It's important to remember the sacrifices required to even get a glimpse of any of that. To me, it's not worth it.

>The problem, of course, isn’t just our jobs: We’re working even when we’re not working. We go to happy hour with our coworkers after we get off, share a beer in the office and loiter socially before we leave, take our laptops home when we just have to finish just one more spreadsheet for tomorrow’s meeting, check emails over brunch, and shuffle outside to take an “important call” while everybody else is ordering mimosas. If you’re a writer, your social life likely consists of going to parties with other writers, who will, inevitably, talk about writing; even when we leave work, we can’t shut up about it.

Ouch.

>The Italians have a concept called “la dolce far niente,” which translates to “the sweetness of doing nothing.” In context, that phrase might recall Diane Lane tromping through the vineyards of Tuscany, stepping on grapes, and having PG-13 romances, but for the overworked cubicle dweller, the sweet life begins when we learn to lean out. Amy Poehler calls it “healthy detachment,” but the Zen spiritual leader Thich Nhat Hanh describes it as “letting go.” Hanh writes, “Letting go gives us freedom, and freedom is the only condition for happiness. If, in our heart, we still cling to anything—anger, anxiety, or possessions—we cannot be free.”

Let go, do great work, but live your life. Only get one.
",2015-03-30 01:17:44.663442,2015-03-30 01:20:31.592376,,,
172,Stick To Principles Not Frameworks,"> Studying frameworks, you have to relearn, moving to new solutions that appear all the time, and a part of your experience will be erased. But when you learn principles — they stay.

And another golden nugget about front-end frameworks

> Programming becomes a victim of marketing. They promise us a magic button that will solve all of our problems.
[http://kukuruku.co/hub/programming/do-not-learn-frameworks-learn-the-architecture](http://kukuruku.co/hub/programming/do-not-learn-frameworks-learn-the-architecture)",2015-04-03 16:08:19.184049,2015-04-03 16:10:30.144152,,,
173,Final Four Saturday,"With all the stress of building software for other people, learning new tech, and complaining about JavaScript. Sometimes all I need is to make some homemade nachos and watch the final four with my son on a lazy Saturday. ",2015-04-04 12:51:03.986671,2015-04-04 12:51:03.986671,,,
174,The Case For Isomorphic Javascript,"If you know me at all. Even if you haven’t seen me rant on Twitter, you should know that I have this constant struggle with JavaScript. Not in the language itself, but more of an issue with what we, as developers, are doing with it.

Granted, JavaScript is just a programming language. As such, you can do programmery things with it.

My argument has always been *Is this the right task for JavaScript?*. One could say C++ is a great language, but you would be crazy to try and build a complete web application with it. That’s just not what it’s good at. It’s better at close to the metal stuff. Super fast code. And because of that, it’s more difficult to work with than a higher level scripting language.

Here is the part where I declare why JavaScript was invented so  I can make the case that we are using it wrong. But while researching I learned something I didn’t expect.

First, [JavaScript was invented for nonprofessional programmers](http://en.wikipedia.org/wiki/JavaScript#History). That sounds harsh, and I imagine this makes a lot of JavaScript developers angry. It could be reworded as “_JavaScript was invented to target non-java and non-c++ developers._” It was invented to give more developers access to a programming environment that they could work in and possible build more awesome stuff.

I didn’t expect that.

I expected to learn that JavaScript was developed just for web page scripting. That doesn’t appear to be true. I stand corrected.

Here’s the real kicker. Server side JavaScript was actually introduced in 1994 in a Netscape product called [Datacraft](http://www.datacraft.com/livewire.html).

Those involved in the early days of JavaScript were already planning for it to run on the server. They were planning on using JavaScript as a complete programming environment. Client and server.


## The Extracted API Fallacy

The idea of extracting client side code from server side code sounds perfect. Take all of your JavaScript front end stuff and have one app for it. It will handle displaying data, state changes, fancy interactions, and package management. Then take all of your server side logic, create an API, and feed that to your client side app.

Perfect!

We now have a client side app for rich interactions, and we have an API that can feed anything; iOS, Web, Android, etc… What’s not to like?

This is great in theory, but in practice it starts to fall apart  a bit. The first sign is that you still need a front end web server. Well, if you have any sort of progressive modern app you’ll need a web server. At a minimum, you will need a way to compile and serve all of your assets.

You’ll also need **a lot** of libraries and packages. And of course, if you use cool stuff like requiring modules as needed, you need a build process. That’s more dependencies.

All of this before you get to the server side.

The additional complexity is not worth it. This is why so many companies go heavy client side and then go back to the server side. I think if they would have went all in, they would have had a different experience. But that is hard for larger code bases. They definitely felt the pain.

We should be moving to easier, not more difficult.


## Decreasing Complexity with an Isomorphic Approach

I still remember the first time I used Rails. I **knew** it was a game changer and it was how I wanted to build applications. I haven’t seen that with JavaScript yet. Actually, it’s been the opposite. Instead of thinking *This is awesome! I want to build all applications like this.*, I think *OMG this is awful! Why is this so complex?*

Netscape had the right idea in ’94. If you are developing JavaScript apps, develop JavaScript apps. I think about the client side applications I have worked on. It would have been easier to add a node server and a data store than it was to maintain two completely different applications.

I’ve been researching and playing around with isomorphic application development. I really think this is the next logical step for the web.

I’d like to report back with more data once I have a few of these under my belt, but I really encourage you to take a look at isomorphic development. Especially if you’ve felt the extracted API pain.

",2015-04-27 21:27:42.559578,2015-04-27 21:28:42.750989,,,
176,How To Run Sinatra And Compile Sass Files At The Same Time,"I love me some [Sinatra](http://sinatrarb.com). More often than not, I reach for Sinatra when starting a new app. It’s not that I don’t like Rails. I just prefer the control and simplicity of Sinatra.

Naturally when using something like Sinatra, you lose certain things like the auto reloading of files and niceties like compiling [Sass](http://sass-lang.com/) for you.

There are tools for these. [Shotgun](https://github.com/rtomayko/shotgun) allows Sinatra apps to be reloaded when files change. You do still have to manually refresh the browser, but you no longer need to restart the server.

And of course, Sass comes with a [CLI](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#using_sass) for compiling sass files into css files. It’s pretty straight forward. Pass it some sass files and some css files, and it will compile them for you. I generally pass it entire directories. Something like this

    sass —watch sass:css

That will grab all my sass files, compile them, and place them in the css directory.

I also need my server running. Shotgun handles this. This particular Sinatra app isn’t modularized yet, so I just pass it the entry point. For me that’s almost always `app.rb`

  shotgun app.rb

You can probably see my issue already. I need two terminal instances for this. Or I can combine them.

Here is where you might want to grab the `&&` operator, but that would be a mistake. The `&&` operator will wait for the first task to complete and since both tasks watch, the second task will never fire because the first won’t complete until you kill it.

What you need here is the `&` operator. This will run a task in the background. When your terminal reaches this operator, it will detach that tasks from `stdin` and allow other tasks to be run simultaneously.

Now you have something like this

    shotgun app.rb & sass —watch sass:css

You can run that in one terminal tab and see both processes at the same time.

To make it even nicer, you can throw it in a [Rakefile](https://github.com/ruby/rake) so it’s easy to remember.


    task default: ""start""

    desc 'Run the server and watch sass files'
    task :start do
      system ""shotgun app.rb & sass —watch sass:css""
    end

Because we have defined a default task, we can run this one of two ways.

		rake

		rake start

One less thing you need to think about.


",2015-05-14 20:07:22.564313,2015-05-14 20:08:49.071405,,,
177,Working With Git Stash,"Have you ever been working on something and you’re not quite in a good spot to commit? You know, a *good* commit. The kind with meaningful commit messages that describe what you’re committing and why.

You don’t really want to commit because you have some garbage changes that you would like to go back and fix, but you haven’t gotten around to it. You’re still developing.

Then something comes up and you need to jump on another branch and fix something really quick. Call it a hot fix.

Now you’re stuck. You might just grumble a little bit, add what you have, and commit with a vague and often unhelpful commit message. I’ve done this a lot. Too often.

This is what `git stash` was designed for. With stash you take everything you have, store it somewhere so it doesn’t mess you’re working tree, and come back to it later.

Here’s how it works.

Just running `git stash` without any arguments saves the changes and applies a WIP message. For example, if you were working on a dev branch, change a couple of files, and then you needed to jump back on master and typed `git stash`. It would stash the changes for you. Running `git stash list` would show your lone stash with a WIP message.

		stash@{0}: WIP on dev: 3bff306 Initial message

The initial message text is my last commit message. This is where the branch was reverted to after saving my changes.

Once you’re done doing what you needed to do and jump back on your dev branch, you can simply run `git stash apply` and have your changes reapplied to the dev branch. It’s worth noting that apply leaves the stashed changes in your stash list. That may not be what you expect. If you want to apply your changes and remove the changes from the stash list, run `git stash pop`. This will apply that last change and remove those changes from the stash list.

Now you should see something like this

		On branch dev
		Changes not staged for commit:
  		(use “git add <file>…” to update what will be committed)
  		(use “git checkout — <file>…” to discard changes in working directory)

			modified:   sample.txt
			modified:   sample2.txt

		no changes added to commit (use “git add” and/or “git commit -a”)
		Dropped refs/stash@{0} 			(4974d43e224dd25ab4c75c0b1e583e0748d7d200)

That’s great and all, but maybe you want to leave yourself a message. Maybe it’s going to be a while before you come back. For that case you can use `git stash save` with a message.

If you run `git stash save “Another emergency needs my attention”`, you should see something like this.

		Saved working directory and index state On dev: Another emergency needs my attention
		HEAD is now at 3bff306 Initial message

And `git stash list` should show something like this.

		stash@{0}: On dev: Another emergency needs my attention

This has been a huge help for those situations where I need to jump to another branch when I’m in the middle of something. Hopefully, it will help you too.
",2015-05-19 14:45:43.785297,2015-05-19 14:45:43.785297,,,
178,Web Versus Native,"Somewhere along the way, we lost our way. We went from using the web at what it’s ideal for, linking documents together, to trying to make it do something it’s not good at. Making *desktop-like applications*. Or maybe we could call them *native-type applications*, since what we are really doing is trying to mimic mobile devices.

I think I know what this stems from. I think it’s just a fact that mobile is taking over at an rapid pace. You either have to get on board or get out of the way. Clearly no one wants to get out of the way, making software is fun.

But what if, like me, you don’t really have much, if any, experience making installable software? It’s not like web development. It’s a completely different animal. What do you do if you can’t get on board because you don’t *want* to make native software?

Simple.

You bring it to where you are comfortable. The web.

Seems like a good idea. Use JavaScript to make smooth animations instead of page loads. The user will never know. They will *think* it’s like an iPhone app. But they will know. They will know they are on a website. They will know because, more than likely, they use the web everyday. And they know it’s not an iPhone app. And they are okay with that. They know pages load, links to go other pages, and they expect URLs to work.

What we’ve done is make it convenient for **us**. Sure we tell the customer/user that we have done this for them. Look at how fast the transitions are! They don’t care. Look at how only part of the page gets updated! They don’t care. Look at how the URL changes but the page doesn’t. Again. They don’t care.

If an effort to side step making a truly delightful web experience on the web. And a delightful native experience on a device. We have introduced a level of complexity that we think makes it awesome, when in reality, it causes more issues than it solves. Some may argue there wasn’t a problem to begin with.

How do fix this?

Let’s call it [SRP](http://en.wikipedia.org/wiki/Single_responsibility_principle). Use the web for the web and use native for native. Understand that native apps are generally faster. They are closer to the metal. Web apps will always have a browser between the user and the computer.

",2015-07-04 17:30:08.921555,2015-07-04 17:30:08.921555,,,
179,Saving The Web,"I just read a superb article on [Medium](https://medium.com/matter/the-web-we-have-to-save-2eb1fe15a426). That's quite ironic after you read the piece.

In it, Hossein Derakhshan talks about the web we lost. Which seems to pop up every couple of months. I have to admit I'm intrigued every time I see one of these. They all make great points. We did lose something when we all got _social_.

Hossein is right. I used to start my day in an RSS reader checking up on what was happening. I now start on Twitter or Facebook. I'm kinda ashamed about that. I do love the open web and wonder if we are on the cusp of some sort of, err I don't know, revolution. One where those that are capable give those that are incapable the ability to host stuff on the internet free from censorship or any sort of silo.

I don't know what this might look like. Certainly not _web rings_. Please. Do not start web rings again.

I imagine some sort of RSS or JSON would be involved and give people a way to share information without limitations.

Certainly something to think about if you are technical enough to run servers and build software to empower people.",2015-07-17 14:26:26.324162,2015-07-17 14:26:26.324162,,,
180,Google Spotlight Stories Is Amazing,"Every once in a while something comes along on mobile and I am just absolutely blown away. It's just one of those uses of tech that you start to wonder what's possible and where it could possibly end up.

Seriously. Stop what you are doing and go get [Google Spotlight Stories](http://www.theverge.com/2015/7/23/9023411/spotlight-stories-ios-google-releases). It's amazing!

The app puts you right in the center of a movie and physically move around to see what is happening.

The first thing I did was download the movie Help. It's a pretty large file and takes a while. But once you watch it, you'll know why.

It's a completely immersive watching experience. I was literally spinning in my chair trying to look at everything.

The coolest part is you will hear or see things happening behind you and try to turn around to see what is happening.

This app is seriously cool.

",2015-07-24 17:18:17.876132,2015-07-24 17:18:17.876132,,,
181,Has Jquery Served Its Purpose,"I used to be a jQuery hater. I’m sure that stuff is on the Internet somewhere. But when jQuery hit the scene, I was convinced that it didn’t really serve a purpose. I could already write JavaScript. What did I need a library for? Then I started to see some usefulness in the library. Animations were kinda cool. And the Ajax stuff was **really** cool.

I started to convert. I started to see how this tool could actually help me. But it was a pretty long road. One that I fought pretty hard. But in the end. jQuery won me over.

Those days were a little different. Writing the same code for different browsers was very common. There was a lot you had to remember. Lots of little quirks and bugs in browsers. I’m not so sure that’s the case anymore. Browsers have gotten pretty standard.

## jQuery as a Crutch

jQuery is a crutch now. It’s such a default in a web developer’s tool belt that they don’t ask if they need it. Until they start to ask if they need it.

What gets me is the API changes in jQuery. There are a lot of them. Functions get renamed all the time and old functions get deprecated and finally removed.

## An Example
There used to be this real handy function for attaching an event to an element and have that event watch for new elements and automatically attach the event handler to those also. It was called `live` and it was one of my favorite features of jQuery.

If you look at that function now, you will see that it has changed twice. I’m not even sure if they functionality has changed, but the name has changed.

> As of jQuery 1.7, the .live() method is deprecated. Use .on() to attach event handlers. Users of older versions of jQuery should use .delegate() in preference to .live().

So here we are. I can’t use `live`. I need to use `on`, unless I use an older version. Then I should use `delegate`.

This is just one example that frustrates me. I hit these deprecations all over the place.

I understand deprecations are common, but this is extreme.

## Another example.

To access an element’s attributes, you could use `attr`. This still kinda works on some things. More often than not, I need to use `prop` in Firefox or it just fails silently. I don’t know why. They seem like they do the same thing.

Here is the same code in JavaScript: `getAttribute`. Why am I using an abstraction that seems to change? I can’t answer that. I don’t know.

I think it’s time to go back to vanilla JavaScript. Well, except for Ajax. That doesn’t seem to change much and is super helpful. But then again, the cool kids tell me there are libraries just for Ajax now.",2015-08-11 02:22:28.130138,2015-08-11 02:23:00.475793,,,
182, Adventures In Java Script,"Today I started to take JavaScript back. I started taking a bunch of jQuery code and convert it to plain old JavaScript. I discovered a few things.

1) There are functions in the JavaScript API that I don’t remember before I started using jQuery. `querySelector` is pure awesomeness.

2) Client side code is fun again. I am not programming *in* a language anymore, but *into* a language. (if that doesn’t make sense to you, drop everything and read Code Complete). My thoughts and overall design are at a much higher level, and I am having a lot of fun discovering that the language already supports a lot of what I want to do.

Two links that have been huge helps to me are

[MDN Web API Interfaces](https://developer.mozilla.org/en-US/docs/Web/API)

[MDN JavaScript Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference)",2015-08-12 02:17:29.897844,2015-08-12 02:17:43.508456,,,
183,Do Nothing,I often think about doing something cool and talk myself out of it. Lately it's been some sort of screencast site where I teach some programming thing. Nothing big. Just small things. Maybe once a week. I would need a library of videos built up before.  That's where I get derailed. All this thinking and planning. And then. I do nothing. Over and over again. I do nothing. ,2015-08-27 00:33:13.554718,2015-08-27 00:33:13.554718,,,
